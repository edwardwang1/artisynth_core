/**
 * Copyright (c) 2014, by the Authors: John E Lloyd (UBC)
 *
 * This software is freely available under a 2-clause BSD license. Please see
 * the LICENSE file in the ArtiSynth distribution directory for details.
 */
package maspack.solvers;

import maspack.matrix.*;
import maspack.spatialmotion.SpatialInertia;
import maspack.spatialmotion.Twist;
import maspack.spatialmotion.Wrench;
import maspack.util.*;

import java.util.Random;

public class DantzigLCPSolverTest {
   private static double DOUBLE_PREC = 2.220446049250313e-16;
   private static double EPS = 10000 * DOUBLE_PREC;

   private static final double Inf = Double.POSITIVE_INFINITY;

   private DantzigLCPSolver mySolver;
   private Random myRandom;

   private FunctionTimer timer = new FunctionTimer();
   private int pivotCnt;

   private static double inf = Double.POSITIVE_INFINITY;

   public DantzigLCPSolverTest() {
      mySolver = new DantzigLCPSolver();
      myRandom = maspack.util.RandomGenerator.get();
      myRandom.setSeed (0x1234);
   }

   public void testSolver (
      VectorNd z, VectorNd w, MatrixNd M, VectorNd q, VectorNd lo, VectorNd hi,
      int nub, int size, DantzigLCPSolver.Status expectedStatus) {
      DantzigLCPSolver.Status status;
      int[] state = new int[size];

      if (z == null) {
         z = new VectorNd (size);
      }
      if (w == null) {
         w = new VectorNd (size);
      }

      timer.restart();
      status = mySolver.solve (z, w, M, q, lo, hi, nub, state);
      timer.stop();
      pivotCnt += mySolver.getIterationCount();
      if (expectedStatus == DantzigLCPSolver.Status.SOLVED &&
          status != expectedStatus) { // perturb the problem
         int cnt = 10;
         int k = 0;
         double mag = q.infinityNorm();
         do {
            VectorNd fuzz = new VectorNd (q.size());
            fuzz.setRandom (-mag * 1e-13, mag * 1e-13);
            q.add (fuzz);
            status = mySolver.solve (z, w, M, q, lo, hi, nub, state);
            mag *= 10;
            k++;
         }
         while (k < cnt && status != DantzigLCPSolver.Status.SOLVED);
         System.out.println ("random retry level " + k);
      }
      if (status != expectedStatus) { // System.out.println ("M=\n" +
                                       // M.toString("%10.6f"));
         // System.out.println ("q=\n" + q.toString("%10.6f"));
         throw new TestException ("solver returned " + status + ", expected "
         + expectedStatus);
      }
      if (status == DantzigLCPSolver.Status.SOLVED) { // check the solution
         TestException failException = null;
         int n = z.size();
         VectorNd wcheck = new VectorNd (n);
         wcheck.mul (M, z);
         wcheck.add (q);
         double mag = 0;
         for (int i = 0; i < n; i++) {
            mag = Math.max (mag, Math.abs (z.get(i)));
            mag = Math.max (mag, Math.abs (wcheck.get(i)));
         }
         double tol = DOUBLE_PREC * mag * 100000;

         for (int i = 0; i < n; i++) {
            double l = lo.get(i);
            double h = hi.get(i);
            double zval = z.get(i);
            double wval = w.get(i);

            if (Math.abs (wval - wcheck.get(i)) > tol) {
               failException =
                  new TestException ("w value inconsistent with z");
               break;
            }
            if (z.get(i) < -tol + l || z.get(i) > tol + h) {
               failException =
                  new TestException ("z[" + i + "]=" + z.get(i)
                  + " is out of bounds " + l + "," + h);
               break;
            }
            if (state[i] == DantzigLCPSolver.Z_VAR) {
               if (zval < -tol + l || zval > tol + h) {
                  failException =
                     new TestException ("z[" + i + "]=" + zval
                     + " is out of bounds " + l + "," + h);
                  break;
               }
               if (Math.abs (wval) > tol) {
                  failException =
                     new TestException ("w[" + i + "]=" + wval
                     + " should be zero");
                  break;
               }
            }
            else if (state[i] == DantzigLCPSolver.W_VAR_LOWER) {
               if (Math.abs (zval - l) > tol) {
                  failException =
                     new TestException ("z[" + i + "]=" + zval
                     + " should be at lower bound " + l);
                  break;
               }
               if (wval < -tol) {
                  failException =
                     new TestException ("w[" + i + "]=" + wval
                     + " should be positive");
                  break;
               }
            }
            else if (state[i] == DantzigLCPSolver.W_VAR_UPPER) {
               if (Math.abs (zval - h) > tol) {
                  failException =
                     new TestException ("z[" + i + "]=" + zval
                     + " should be at upper bound " + h);
                  break;
               }
               if (wval > tol) {
                  failException =
                     new TestException ("w[" + i + "]=" + wval
                     + " should be negative");
                  break;
               }
            }
            else {
               failException =
                  new TestException ("state[" + i + "]=" + state[i]
                  + " is unknown");
               break;
            }
         }
         if (failException != null) {
            System.out.println ("M=\n" + M.toString ("%12.8f"));
            System.out.println ("q=\n" + q.toString ("%12.8f"));
            System.out.println ("z=\n" + z.toString ("%12.8f"));
            System.out.println ("w=\n" + w.toString ("%12.8f"));
            System.out.println ("lo=\n" + lo.toString ("%12.8f"));
            System.out.println ("hi=\n" + hi.toString ("%12.8f"));
            System.out.print ("state=");
            for (int i = 0; i < n; i++) {
               System.out.print (state[i] + " ");
            }
            System.out.println ("");
            throw failException;
         }
      }
   }

   public void testSolver (
      MatrixNd M, VectorNd q, int size, DantzigLCPSolver.Status expectedStatus) {
      DantzigLCPSolver.Status status;
      boolean[] zBasic = new boolean[size];
      VectorNd z = new VectorNd (size);

      timer.restart();
      status = mySolver.solve (z, M, q, zBasic);
      timer.stop();
      pivotCnt += mySolver.getIterationCount();
      if (expectedStatus == DantzigLCPSolver.Status.SOLVED &&
          status != expectedStatus) { // perturb the problem
         int cnt = 10;
         int k = 0;
         double mag = q.infinityNorm();
         do {
            VectorNd fuzz = new VectorNd (q.size());
            fuzz.setRandom (-mag * 1e-13, mag * 1e-13);
            q.add (fuzz);
            status = mySolver.solve (z, M, q, zBasic);
            mag *= 10;
            k++;
         }
         while (k < cnt && status != DantzigLCPSolver.Status.SOLVED);
         System.out.println ("random retry level " + k);
      }
      if (status != expectedStatus) { // System.out.println ("M=\n" +
                                       // M.toString("%10.6f"));
         // System.out.println ("q=\n" + q.toString("%10.6f"));
         throw new TestException ("solver returned " + status + ", expected "
         + expectedStatus);
      }
      if (status == DantzigLCPSolver.Status.SOLVED) { // check the solution
         TestException failException = null;
         int n = z.size();
         VectorNd w = new VectorNd (n);
         w.mul (M, z);
         w.add (q);
         double mag = 0;
         for (int i = 0; i < n; i++) {
            mag = Math.max (mag, Math.abs (z.get(i)));
            mag = Math.max (mag, Math.abs (w.get(i)));
         }
         double tol = DOUBLE_PREC * mag * 100000;

         for (int i = 0; i < n; i++) {
            if (z.get(i) < -tol || w.get(i) < -tol) {
               failException =
                  new TestException ("negative values for z and/or w");
            }
            if (Math.abs (z.get(i) * w.get(i)) > tol) {
               failException =
                  new TestException ("w and z are not complementary");
            }
            if (z.get(i) > tol && !zBasic[i]) {
               failException =
                  new TestException ("non-zero value for non-basic z");
            }
         }
         if (failException != null) {
            System.out.println ("M=\n" + M.toString ("%12.8f"));
            System.out.println ("q=\n" + q.toString ("%12.8f"));
            System.out.println ("z=\n" + z.toString ("%12.8f"));
            System.out.println ("w=\n" + w.toString ("%12.8f"));
            System.out.print ("zBasic=");
            for (int i = 0; i < n; i++) {
               System.out.print (zBasic[i] + " ");
            }
            System.out.println ("");
            throw failException;
         }
      }
   }

   double[] Mvals0 =
      new double[] { 1.4011237575017552, -0.4369270100161038,
                    0.19374538403179725, 0.023402457493481882,
                    0.42665532019608077, 0.624225742886146,
                    0.14903014424567868, 0.25679814606982954,
                    -0.7369474725842275, 0.1717335215823927,
                    0.4137025474521706, 0.20238375067201897,
                    -0.21892980669933865, -0.02135614963179877,
                    -0.31770945825151076, 0.4781139990718151,
                    0.2963547688576947, -0.07304858242487283,
                    1.0248943023074348, 0.4041227619675828,

                    -0.4369270100161038, 0.8256022710837198,
                    -0.3260204872553233, -0.024553554022904725,
                    0.14942695837492842, -0.39751277310553923,
                    0.3201141603293923, 0.2624965606388539,
                    0.09319603408420267, 0.32787332308790706,
                    -0.2531508829860215, 0.12653533060857602,
                    0.4126996080039211, 0.6194861477244507,
                    0.12428169134456186, -0.2996392496888317,
                    -0.4878636745049765, 0.17055255714947065,
                    -0.3510694253349826, 0.0037561288730430936,

                    0.19374538403179725, -0.3260204872553233,
                    0.7727930081733696, 0.26587745272166935,
                    0.03737502552278538, -0.2526305453932223,
                    -0.15511961930768922, -0.0015876202498046055,
                    -0.4946220670424723, -0.12422559120407509,
                    -0.036343683375177994, 0.35433175055106825,
                    0.37298087565762056, -0.5744365624282078,
                    0.11976296525475971, -0.007778002614897573,
                    0.08886067074210946, 0.13418057853790136,
                    0.01799299332413685, -0.04537201425937465,

                    0.023402457493481882, -0.024553554022904725,
                    0.26587745272166935, 0.5205675527020851,
                    -0.12533885181114984, -0.5418092352057367,
                    0.09400507016088083, -0.2616377736329799,
                    -0.17518013476213404, -0.12572751502981472,
                    -0.26793373399275633, 0.42995233233911234,
                    -0.05204899145073306, 0.06082694245129411,
                    -0.07096104607346354, -0.19808986753074523,
                    -0.0035036324442653047, -0.33615267652213443,
                    -0.12885540385230515, -0.13236912540767137,

                    0.42665532019608077, 0.14942695837492842,
                    0.03737502552278538, -0.12533885181114984,
                    0.8557598687186416, 0.09011418716803095,
                    0.036795504632061576, 0.40183562800382616,
                    -0.38061811121573486, 0.11735139305607659,
                    0.46535647898349086, 0.18999858730278896,
                    0.23041727039351334, 0.5400171840380893,
                    -0.33142119780967594, 0.012638406968336194,
                    -0.19217128582050136, 0.18609055971950603,
                    -0.02586136825357524, 0.2611614185862055,

                    0.624225742886146, -0.39751277310553923,
                    -0.2526305453932223, -0.5418092352057367,
                    0.09011418716803095, 1.4886890904211656,
                    -0.1267441837458369, 0.32075176511506565,
                    -0.012143071161731411, 0.06696257219091922,
                    0.07829429747319377, -0.345540231037822,
                    -0.47733131961521297, -0.28575883351123627,
                    0.006686264979584633, 0.5274621910294024,
                    0.29565991360397775, 0.32760489479790694,
                    0.8313639448281932, -0.022108771518401932,

                    0.14903014424567868, 0.3201141603293923,
                    -0.15511961930768922, 0.09400507016088083,
                    0.036795504632061576, -0.1267441837458369,
                    0.7408841543837121, -0.08647158008662817,
                    0.19516331880747287, 0.23259275304530613,
                    0.023004326919682627, 0.495270144833124,
                    0.13134289730129003, 0.060986106854732554,
                    0.09607176169488754, -0.4106900390469916,
                    -0.21461454901485055, -0.4268466057580958,
                    0.3914133078613235, 0.2860168723215941,

                    0.25679814606982954, 0.2624965606388539,
                    -0.0015876202498046055, -0.2616377736329799,
                    0.40183562800382616, 0.32075176511506565,
                    -0.08647158008662817, 0.8906646701624438,
                    -0.3443067443607499, 0.5680483543401781,
                    0.17149629215508227, -0.47118427277529723,
                    0.3532924515783118, 0.27803081311921674,
                    0.02583729195932971, 0.16200906534008136,
                    -0.32182693365047194, 0.4252226152782267,
                    0.3092730567875123, 0.3221130982341106,

                    -0.7369474725842275, 0.09319603408420267,
                    -0.4946220670424723, -0.17518013476213404,
                    -0.38061811121573486, -0.012143071161731411,
                    0.19516331880747287, -0.3443067443607499,
                    1.1940102339418508, -0.46605755241631486,
                    0.20423993484227873, -0.3819804232679807,
                    -0.2944780203438396, -0.09744775195884611,
                    0.28591630130490836, -0.17386475635774437,
                    -0.005724540594256689, -0.2522682561312107,
                    -0.11462318020385265, -0.12252039569810819,

                    0.1717335215823927, 0.32787332308790706,
                    -0.12422559120407509, -0.12572751502981472,
                    0.11735139305607659, 0.06696257219091922,
                    0.23259275304530613, 0.5680483543401781,
                    -0.46605755241631486, 1.1035712132489022,
                    -0.18884414111577427, -0.11736989626276964,
                    0.29316089724451233, 0.24841296069520774,
                    -0.13161552878690047, -0.3497431561228355,
                    -0.40196050070273837, -0.17816239502589304,
                    0.24311231219533402, 0.5271786224465153,

                    0.4137025474521706, -0.2531508829860215,
                    -0.036343683375177994, -0.26793373399275633,
                    0.46535647898349086, 0.07829429747319377,
                    0.023004326919682627, 0.17149629215508227,
                    0.20423993484227873, -0.18884414111577427,
                    1.1482978274691609, -0.4893681921318554,
                    0.05393651898785083, 0.04942550476542629,
                    0.07121468688154595, 0.1496309651205553,
                    0.1259565315092847, -0.11302319628188048,
                    0.22637911986361142, 0.5700746358151797,

                    0.20238375067201897, 0.12653533060857602,
                    0.35433175055106825, 0.42995233233911234,
                    0.18999858730278896, -0.345540231037822, 0.495270144833124,
                    -0.47118427277529723, -0.3819804232679807,
                    -0.11736989626276964, -0.4893681921318554,
                    1.3725358441892135, 0.17502539464746744,
                    -0.058794707812722585, -0.2588823053576404,
                    -0.3908197384279026, -0.0719689711078967,
                    -0.22307372248192742, -0.03381166194594702,
                    -0.23302132197276532,

                    -0.21892980669933865, 0.4126996080039211,
                    0.37298087565762056, -0.05204899145073306,
                    0.23041727039351334, -0.47733131961521297,
                    0.13134289730129003, 0.3532924515783118,
                    -0.2944780203438396, 0.29316089724451233,
                    0.05393651898785083, 0.17502539464746744,
                    0.8796195399340799, -0.11978450760960131,
                    0.31793136811969086, -0.24248437368234732,
                    -0.35463737124871436, 0.37585864997301105,
                    -0.24214811971804615, 0.19208165863947363,

                    -0.02135614963179877, 0.6194861477244507,
                    -0.5744365624282078, 0.06082694245129411,
                    0.5400171840380893, -0.28575883351123627,
                    0.060986106854732554, 0.27803081311921674,
                    -0.09744775195884611, 0.24841296069520774,
                    0.04942550476542629, -0.058794707812722585,
                    -0.11978450760960131, 1.3053431389629204,
                    -0.4216592865968605, -0.09708194322877546,
                    -0.3489697678419036, -0.06519524796206654,
                    -0.4425021167906371, 0.0780216407317884,

                    -0.31770945825151076, 0.12428169134456186,
                    0.11976296525475971, -0.07096104607346354,
                    -0.33142119780967594, 0.006686264979584633,
                    0.09607176169488754, 0.02583729195932971,
                    0.28591630130490836, -0.13161552878690047,
                    0.07121468688154595, -0.2588823053576404,
                    0.31793136811969086, -0.4216592865968605,
                    0.9076055329675871, -0.11125189532496203,
                    0.013739113546366775, 0.14185392893617077,
                    -0.07178239311685755, -0.01980725573414044,

                    0.4781139990718151, -0.2996392496888317,
                    -0.007778002614897573, -0.19808986753074523,
                    0.012638406968336194, 0.5274621910294024,
                    -0.4106900390469916, 0.16200906534008136,
                    -0.17386475635774437, -0.3497431561228355,
                    0.1496309651205553, -0.3908197384279026,
                    -0.24248437368234732, -0.09708194322877546,
                    -0.11125189532496203, 0.8364413173368132,
                    0.3533970112347167, 0.5711598165435761,
                    0.39127853528034445, -0.19478801720778216,

                    0.2963547688576947, -0.4878636745049765,
                    0.08886067074210946, -0.0035036324442653047,
                    -0.19217128582050136, 0.29565991360397775,
                    -0.21461454901485055, -0.32182693365047194,
                    -0.005724540594256689, -0.40196050070273837,
                    0.1259565315092847, -0.0719689711078967,
                    -0.35463737124871436, -0.3489697678419036,
                    0.013739113546366775, 0.3533970112347167,
                    0.4368770119208702, -0.009244292092535954,
                    0.18091742727787985, -0.1400861660549537,

                    -0.07304858242487283, 0.17055255714947065,
                    0.13418057853790136, -0.33615267652213443,
                    0.18609055971950603, 0.32760489479790694,
                    -0.4268466057580958, 0.4252226152782267,
                    -0.2522682561312107, -0.17816239502589304,
                    -0.11302319628188048, -0.22307372248192742,
                    0.37585864997301105, -0.06519524796206654,
                    0.14185392893617077, 0.5711598165435761,
                    -0.009244292092535954, 1.0400067701394977,
                    -0.11423235683462915, -0.34152179518936054,

                    1.0248943023074348, -0.3510694253349826,
                    0.01799299332413685, -0.12885540385230515,
                    -0.02586136825357524, 0.8313639448281932,
                    0.3914133078613235, 0.3092730567875123,
                    -0.11462318020385265, 0.24311231219533402,
                    0.22637911986361142, -0.03381166194594702,
                    -0.24214811971804615, -0.4425021167906371,
                    -0.07178239311685755, 0.39127853528034445,
                    0.18091742727787985, -0.11423235683462915,
                    1.422085229253819, 0.3836053413230326,

                    0.4041227619675828, 0.0037561288730430936,
                    -0.04537201425937465, -0.13236912540767137,
                    0.2611614185862055, -0.022108771518401932,
                    0.2860168723215941, 0.3221130982341106,
                    -0.12252039569810819, 0.5271786224465153,
                    0.5700746358151797, -0.23302132197276532,
                    0.19208165863947363, 0.0780216407317884,
                    -0.01980725573414044, -0.19478801720778216,
                    -0.1400861660549537, -0.34152179518936054,
                    0.3836053413230326, 0.7005245763863889 };

   double[] qvals0 =
      new double[] { 0.26731504147756535, 0.15294109365673708,
                    -0.14531487430537582, -0.3416786367834468,
                    0.3044039314842051, 0.1207252419474033,
                    0.058029539649079115, 0.17905309751438792,
                    -0.20518197558639623, 0.18654177234572897,
                    0.22880861446465756, 0.02207549123846156,
                    0.24141572342330347, 0.11798515876793789,
                    -0.28592629001106007, 0.26028378804248536,
                    -0.03945104839881709, 0.3530241372357618,
                    0.17201335622874375, 0.20427895718309785 };

   double[] Mvals1 =
      new double[] { 0.0010166248216882242, 2.1668953386576241E-4,
                    0.001016591047797844, 9.358609355167392E-4,
                    8.640674783416786E-4, 2.0771910556741544E-4,
                    1.3586094509055743E-4, 2.1662483126204222E-4,
                    1.5007883936375176E-4, 2.0002640157255487E-4,
                    1.5001018614691937E-4, 2.0002640157255484E-4,
                    2.1668953386576247E-4, 0.0010164954269468512,
                    2.1665575997538238E-4, 1.359256476942775E-4,
                    2.0770749181017582E-4, 8.639496959615037E-4,
                    9.357962329130191E-4, 0.0010165601190845039,
                    1.5001019169947127E-4, -1.9999404599968173E-4,
                    1.5007883381119877E-4, -1.999940459996817E-4,
                    0.001016591047797844, 2.1665575997538233E-4,
                    0.0010165572764425346, 9.358332237692023E-4,
                    8.640397665941417E-4, 2.0769139381987856E-4,
                    1.3583323334302055E-4, 2.1659105737166214E-4,
                    1.5006757701231872E-4, 2.0002640157255487E-4,
                    1.4999892379548632E-4, 2.0002640157255484E-4,
                    9.358609355167391E-4, 1.359256476942774E-4,
                    9.358332237692023E-4, 8.695935201111075E-4,
                    7.978000629360469E-4, 1.4145169016178372E-4,
                    6.95935296849257E-5, 1.358609450905572E-4,
                    1.2314705096372325E-4, 2.000264015725549E-4,
                    1.230783977468909E-4, 2.0002640157255487E-4,
                    8.640674783416785E-4, 2.0770749181017576E-4,
                    8.640397665941417E-4, 7.978000629360469E-4,
                    7.388923571480618E-4, 2.0034778276531323E-4,
                    1.413869868599863E-4, 2.0765440226561778E-4,
                    1.2314088989892125E-4, 1.6412493390496045E-4,
                    1.2308455881169278E-4, 1.6412493390496045E-4,
                    2.0771910556741539E-4, 8.639496959615036E-4,
                    2.076913938198785E-4, 1.4145169016178372E-4,
                    2.0034778276531318E-4, 7.387861873796717E-4,
                    7.977353596342496E-4, 8.640027750398812E-4,
                    1.2308456436430475E-4, -1.6409257798300262E-4,
                    1.231408843463085E-4, -1.640925779830026E-4,
                    1.3586094509055737E-4, 9.357962329130191E-4,
                    1.358332333430205E-4, 6.95935296849257E-5,
                    1.413869868599863E-4, 7.977353596342496E-4,
                    8.695935201111077E-4, 9.358609355167392E-4,
                    1.230783977468904E-4, -2.0002640157255525E-4,
                    1.2314705096372276E-4, -2.0002640157255522E-4,
                    2.1662483126204222E-4, 0.0010165601190845039,
                    2.1659105737166214E-4, 1.3586094509055726E-4,
                    2.0765440226561783E-4, 8.640027750398812E-4,
                    9.358609355167393E-4, 0.0010166248216882242,
                    1.5001018614691885E-4, -2.0002640157255528E-4,
                    1.500788393637512E-4, -2.0002640157255525E-4,
                    1.5007883936375176E-4, 1.5001019169947127E-4,
                    1.5006757701231872E-4, 1.2314705096372328E-4,
                    1.2314088989892128E-4, 1.2308456436430478E-4,
                    1.2307839774689043E-4, 1.5001018614691885E-4,
                    3.705471569752991E-4, -1.893220342561922E-4,
                    6.28548397091739E-5, -1.893220342561918E-4,
                    2.0002640157255484E-4, -1.9999404599968173E-4,
                    2.0002640157255484E-4, 2.0002640157255487E-4,
                    1.6412493390496045E-4, -1.640925779830026E-4,
                    -2.0002640157255522E-4, -2.0002640157255525E-4,
                    -1.893220342561922E-4, 4.997137274309627E-4,
                    1.893220342561929E-4, 4.997137274309623E-4,
                    1.500101861469194E-4, 1.500788338111988E-4,
                    1.4999892379548635E-4, 1.2307839774689091E-4,
                    1.230845588116928E-4, 1.2314088434630852E-4,
                    1.231470509637228E-4, 1.5007883936375122E-4,
                    6.285483970917388E-5, 1.893220342561929E-4,
                    3.705471569753001E-4, 1.8932203425619252E-4,
                    2.0002640157255482E-4, -1.999940459996817E-4,
                    2.0002640157255482E-4, 2.0002640157255484E-4,
                    1.6412493390496045E-4, -1.6409257798300256E-4,
                    -2.000264015725552E-4, -2.0002640157255522E-4,
                    -1.893220342561918E-4, 4.997137274309623E-4,
                    1.8932203425619254E-4, 4.997137274309618E-4, };

   double[] qvals1 =
      new double[] { 0.014255202515055257, 0.01425520251505523,
                    0.014249241265913926, 1.3877787807814457E-17,
                    1.3877787807814457E-17, 0.0, 0.0, 0.01425520251505523,
                    0.004695555895544049, 2.0645993814122935E-22,
                    0.004695555895544035, 2.0645993814122935E-22, };

   double[] loVals1 =
      new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    -17.635798280816715, -17.635798280816715,
                    -17.635798280816708, -17.635798280816708,
                    -31.703224753657523, -69.50692045654691,
                    -69.50692045654691, };

   double[] hiVals1 =
      new double[] { inf, inf, inf, inf, inf, inf, inf, inf,
                    17.635798280816715, 17.635798280816715, 17.635798280816708,
                    17.635798280816708, 31.703224753657523, 69.50692045654691,
                    69.50692045654691, };

   double[] Mvals2 = new double[] {
      4.893749710110459, 5.2541776232927955, 3.953488199807045, 0.032893906244902904, -0.7172692881748561, -0.9907780394323917, -1.0660006918841611, 4.368337833161192, 4.944617916378553, 5.072899541726951, 0.7541195051117924, 0.793009655410966, -0.37765345270221834, 0.8771231271533189, -3.160660733100999, -0.06793222460883569, -1.8328292412270109, 1.3257233544280236, 0.004815546295543947, -0.14368453588114016, 
      5.254177623292796, 5.697213349585566, 4.17942029722964, -0.3019791800744326, -1.1594463637832177, -1.2552668025297766, -1.2816195760342008, 4.930051411096878, 5.588763082440592, 5.633704897553891, 1.0276028264656907, 1.0412275142166658, -0.3635653363550395, 1.070695565963806, -3.464531537653931, 0.03236526004287421, -1.9718754761981976, 1.375708874149846, -0.20395805109427445, -0.03697828624342714, 
      3.9534881998070457, 4.17942029722964, 3.348332199071524, 0.8250223145854203, 0.34221433657930567, 0.12400535687560083, 0.06399159860925574, 3.561553215328276, 3.932449342262443, 4.034794172957303, -0.2846549047869679, -0.2536278171162025, -0.9941000726915759, -0.1865209380772706, -2.4398324504328115, -0.23853503218757915, -1.351970050112753, 1.3279874749629486, 0.5654841374287614, -0.2486078904457515, 
      0.032893906244902515, -0.30197918007443303, 0.8250223145854201, 4.127948239723997, 4.759927291216876, 4.772300929480256, 4.775703466419461, 0.19751550399107276, -0.2879747661796981, -0.2937781944168925, -4.616016950342338, -4.617776355547635, -3.5644882732125844, -4.621581607934726, 0.565794411701696, -0.9498949974345989, 0.6530612929453137, 1.337428142120916, 2.9032955384448824, -0.6861052285700939, 
      -0.7172692881748565, -1.1594463637832177, 0.34221433657930544, 4.759927291216876, 5.605208749571869, 5.661701870831971, 5.677238428031262, -0.4461566249586434, -1.0955071436546895, -1.1220035682380303, -5.444776098825962, -5.452808843833369, -4.0563041763699035, -5.470182363439797, 1.140888512061693, -1.0860060112133763, 1.0367022934155752, 1.3392345113859792, 3.3506103935975653, -0.7698155990250053, 
      -0.9907780394323921, -1.2552668025297766, 0.12400535687560083, 4.772300929480256, 5.661701870831971, 7.122948823204696, 7.524836059050254, 1.0818302761049534, 0.3985868213531358, -0.2867705868937732, -6.617674830262456, -6.825449217669478, -5.787158364768636, -7.274833952692152, 1.1581536694252816, -0.8919470046648772, 1.4927340266241536, 1.6949630070683201, 3.5566135725229207, -0.3361144255006858, 
      -1.0660006918841616, -1.2816195760342008, 0.0639915986092553, 4.775703466419461, 5.677238428031262, 7.524836059050254, 8.032981661012865, 1.502074506401266, 0.8095096012412543, -0.057054921401199, -6.9402574505686, -7.202966957130192, -6.263196298226562, -7.771168115758348, 1.1629015789469286, -0.8385746517207913, 1.6181564860111939, 1.7927993361710202, 3.6132703918040905, -0.21683311944118044, 
      4.368337833161192, 4.930051411096878, 3.561553215328276, 0.19751550399107276, -0.4461566249586436, 1.0818302761049534, 1.502074506401266, 6.164969558930473, 6.659442444891601, 5.942782300495096, -0.9365534537710266, -1.1538175793529846, -2.7003793943326233, -1.6237273824245855, -3.00319994184279, 0.14744189956191486, -1.1610188776309491, 1.7797136207418782, 0.3728283543064438, 0.38958225056482126, 
      4.944617916378553, 5.588763082440592, 3.932449342262443, -0.28797476617969786, -1.0955071436546895, 0.3985868213531353, 0.8095096012412543, 6.659442444891601, 7.279793802838856, 6.579030182026193, -0.2998954193971873, -0.5123403156879763, -2.3225632446335878, -0.9718268684851203, -3.4449908361675723, 0.2520032236598978, -1.4557343229906652, 1.7783259381598335, 0.029198267502306474, 0.45388905954996694, 
      5.072899541726951, 5.633704897553891, 4.034794172957303, -0.2937781944168925, -1.1220035682380305, -0.2867705868937739, -0.057054921401199, 5.942782300495096, 6.579030182026193, 6.187287107148122, 0.25022022725305954, 0.13145863124966134, -1.5107539545142294, -0.12540499357340112, -3.453088504007508, 0.1609851876159103, -1.6696233616494514, 1.6114813116049913, -0.06742177420093282, 0.2504734903021605, 
      0.7541195051117926, 1.0276028264656907, -0.28465490478696803, -4.616016950342338, -5.444776098825962, -6.617674830262456, -6.940257450568599, -0.9365534537710266, -0.29989541939718783, 0.25022022725305926, 6.184146077692256, 6.350920294117225, 5.325386024218952, 6.711627814784234, -1.0147501475685272, 0.8971644512720769, -1.3092253745218314, -1.6242240008798683, -3.407016065823039, 0.40144569555805604, 
      0.7930096554109658, 1.0412275142166652, -0.25362781711620275, -4.617776355547635, -5.452808843833367, -6.825449217669478, -7.202966957130192, -1.153817579352985, -0.5123403156879773, 0.13145863124966062, 6.350920294117225, 6.546095731328968, 5.571495805838011, 6.968230832965055, -1.01720507711167, 0.8695712430456357, -1.374068428693789, -1.6748049589085854, -3.4363076138839976, 0.33977781975573473, 
      -0.377653452702218, -0.3635653363550394, -0.9941000726915756, -3.5644882732125844, -4.0563041763699035, -5.787158364768636, -6.263196298226564, -2.7003793943326233, -2.322563244633588, -1.51075395451423, 5.325386024218951, 5.571495805838011, 5.2811478645831, 6.10379429865994, -0.06057114815151307, 0.5822222469703636, -0.8726088152284266, -1.7811825188292016, -2.7514499783706037, 0.06637949337932414, 
      0.8771231271533191, 1.070695565963806, -0.18652093807727016, -4.621581607934725, -5.470182363439796, -7.274833952692152, -7.771168115758346, -1.623727382424585, -0.9718268684851199, -0.12540499357340118, 6.711627814784232, 6.968230832965054, 6.103794298659938, 7.523224579377079, -1.0225146512990173, 0.8098912546779908, -1.5143141846166925, -1.7842039861772703, -3.499660785333163, 0.20639944139810784, 
      -3.1606607331009995, -3.464531537653931, -2.4398324504328115, 0.5657944117016958, 1.140888512061693, 1.1581536694252816, 1.1629015789469281, -3.0031999418427895, -3.444990836167572, -3.4530885040075074, -1.0147501475685268, -1.01720507711167, -0.060571148151512946, -1.0225146512990169, 4.554644001017828, -0.6403373629799272, 1.8176687806517597, -2.128526117549363, -0.5626067063055801, -1.0505232714071395, 
      -0.06793222460883569, 0.03236526004287432, -0.2385350321875791, -0.9498949974345989, -1.0860060112133763, -0.8919470046648772, -0.8385746517207915, 0.14744189956191486, 0.25200322365989775, 0.16098518761591019, 0.8971644512720771, 0.8695712430456359, 0.5822222469703635, 0.8098912546779908, -0.6403373629799274, 2.185076679925149, 1.904411319874853, 0.6827097300631082, -0.1983447821631031, 2.1381277762291884, 
      -1.8328292412270109, -1.9718754761981974, -1.351970050112753, 0.6530612929453137, 1.0367022934155752, 1.4927340266241536, 1.6181564860111937, -1.161018877630949, -1.455734322990665, -1.6696233616494511, -1.3092253745218312, -1.3740684286937888, -0.8726088152284265, -1.5143141846166925, 1.8176687806517597, 1.904411319874853, 4.012932098715344, 0.9561312629925053, 1.5069222805162092, 1.6658713809583898, 
      1.3257233544280236, 1.375708874149846, 1.3279874749629488, 1.337428142120916, 1.3392345113859792, 1.6949630070683206, 1.7927993361710206, 1.779713620741878, 1.7783259381598335, 1.6114813116049913, -1.6242240008798683, -1.6748049589085852, -1.7811825188292016, -1.7842039861772705, -2.128526117549363, 0.6827097300631082, 0.9561312629925052, 2.9399551994667754, 2.894566359386258, 0.8991507384198109, 
      0.004815546295543614, -0.20395805109427456, 0.5654841374287612, 2.9032955384448824, 3.3506103935975653, 3.5566135725229207, 3.6132703918040905, 0.37282835430644357, 0.029198267502306474, -0.06742177420093254, -3.4070160658230395, -3.4363076138839976, -2.7514499783706032, -3.4996607853331634, -0.56260670630558, -0.19834478216310306, 1.5069222805162092, 2.8945663593862574, 4.107969592635264, -0.00671482342591298, 
      -0.14368453588114005, -0.03697828624342703, -0.24860789044575143, -0.6861052285700939, -0.7698155990250053, -0.33611442550068593, -0.21683311944118067, 0.3895822505648212, 0.453889059549967, 0.2504734903021605, 0.40144569555805615, 0.33977781975573484, 0.06637949337932425, 0.20639944139810784, -1.0505232714071395, 2.1381277762291884, 1.6658713809583898, 0.8991507384198109, -0.00671482342591298, 2.2792332989187365, 
   };

   double[] qvals2 = new double[] {
      -11.77758181711576, -13.860014436695264, -7.412390072297159, 10.78908438380831, 14.271739103671209, 12.684836919547548, 12.248386488091619, -12.98069013732307, -15.65608724549744, -14.911794132487266, -12.150680917602008, -11.9250396428139, -5.611673743588998, -11.43701097517954, 10.407759468039758, -5.551115123125783E-17, 9.11883872491715, -2.220446049250313E-15, 7.2584421474466625, -3.1086244689504383E-15
   };

   double[] hiVals2 = new double[] {
      Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, 0.0017373666119946023, 0.0017373666119946023, 0.11247449406052762, 0.11247449406052762, 0.1299255636419224, 0.1299255636419224
   };

   double[] loVals2 = new double[] {
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0017373666119946023, -0.0017373666119946023, -0.11247449406052762, -0.11247449406052762, -0.1299255636419224, -0.1299255636419224
   };

   public void testSpecial (double[] Mvals, double[] qvals) {
      int size = qvals.length;
      MatrixNd M = new MatrixNd (size, size);
      VectorNd q = new VectorNd (size);
      VectorNd lo = new VectorNd (size);
      VectorNd hi = new VectorNd (size);
      for (int i = 0; i < size; i++) {
         lo.set (i, -inf);
         hi.set (i, 0);
      }

      M.set (Mvals);
      q.set (qvals);

      testSolver (
         null, null, M, q, lo, hi, 0, size, DantzigLCPSolver.Status.SOLVED);
   }

   public void testSpecial (
      double[] Mvals, double[] qvals, double[] loVals, double[] hiVals, int nub) {
      int size = qvals.length;
      MatrixNd M = new MatrixNd (size, size);
      VectorNd q = new VectorNd (size);
      VectorNd lo = new VectorNd (size);
      VectorNd hi = new VectorNd (size);

      for (int i = 0; i < size; i++) {
         lo.set (i, loVals[i]);
         hi.set (i, hiVals[i]);
      }

      M.set (Mvals);
      q.set (qvals);

      testSolver (
         null, null, M, q, lo, hi, nub, size, DantzigLCPSolver.Status.SOLVED);
   }

   /**
    * Create a test case involving a single point contact on a plane. The angle
    * of the plane surface relative to the horizontal is ang, and the friction
    * coefficient is mu.
    */
   public void testSinglePointContact (double ang, double mu) {
      double h = 1.0; // time step
      double mass = 1.0;
      double theEst = Math.abs (9.8 * h * Math.cos (ang));
      Vector3d nrml = new Vector3d (Math.sin (ang), Math.cos (ang), 0);
      Vector3d dir0 = new Vector3d (Math.cos (ang), -Math.sin (ang), 0);
      Vector3d dir1 = new Vector3d (0, 0, 1);
      Vector3d vel0 = new Vector3d();
      vel0.scale (9.8 * Math.sin (ang), dir0);

      MatrixNd M = new MatrixNd (3, 3);
      VectorNd q = new VectorNd (3);
      VectorNd z = new VectorNd (3);
      VectorNd w = new VectorNd (3);
      VectorNd lo = new VectorNd (3);
      VectorNd hi = new VectorNd (3);

      M.set (0, 0, nrml.dot (nrml) / mass);
      M.set (0, 1, nrml.dot (dir0) / mass);
      M.set (0, 2, nrml.dot (dir1) / mass);

      M.set (1, 0, dir0.dot (nrml) / mass);
      M.set (1, 1, dir0.dot (dir0) / mass);
      M.set (1, 2, dir0.dot (dir1) / mass);

      M.set (2, 0, dir1.dot (nrml) / mass);
      M.set (2, 1, dir1.dot (dir0) / mass);
      M.set (2, 2, dir1.dot (dir1) / mass);

      q.set (0, nrml.dot (vel0));
      q.set (1, dir0.dot (vel0));
      q.set (2, dir1.dot (vel0));

      lo.set (0, 0);
      lo.set (1, -theEst * mu);
      lo.set (2, -theEst * mu);

      hi.set (0, inf);
      hi.set (1, theEst * mu);
      hi.set (2, theEst * mu);

      testSolver (z, w, M, q, lo, hi, 0, 3, DantzigLCPSolver.Status.SOLVED);

      Vector3d vel = new Vector3d (vel0);
      vel.scaledAdd (z.get (0), nrml);
      vel.scaledAdd (z.get (1), dir0);
      vel.scaledAdd (z.get (2), dir1);

      if (Math.abs (z.get (0)) > 1e-8 || Math.abs (z.get (2)) > 1e-8) {
         throw new TestException ("Only z(1) should be non-zero");
      }
      if (ang <= Math.atan (mu)) {
         if (!vel.epsilonEquals (Vector3d.ZERO, 1e-8)) {
            throw new TestException ("velocity should be 0 with ang="
            + Math.toDegrees (ang));
         }
      }
      else {
         if (vel.epsilonEquals (Vector3d.ZERO, 1e-8)) {
            throw new TestException ("velocity should be non-zero with ang="
            + Math.toDegrees (ang));
         }
         if (Math.abs (Math.abs (z.get (1)) - theEst * mu) > 1e-8) {
            throw new TestException ("friction force not on the cone");
         }
      }
   }

   /**
    * Create a test case involving multi-point contact of a box on a plane. The
    * angle of the plane normal relative to the horizontal is ang, and the
    * friction coefficient is mu.
    */
   public void testMultiPointContact (double ang, double mu) {
      double mass = 4.0;
      SpatialInertia Inertia =
         SpatialInertia.createBoxInertia (mass, 2.0, 1.0, 2.0);
      Point3d[] pnts =
         new Point3d[] { new Point3d (1.0, -0.5, 1.0),
                        new Point3d (1.0, -0.5, -1.0),
                        new Point3d (-1.0, -0.5, -1.0),
         // new Point3d (-1.0, -0.5, 1.0),
         };
      int nump = pnts.length;
      int numc = 3 * pnts.length;

      Wrench[] constraints = new Wrench[numc];
      for (int i = 0; i < pnts.length; i++) {
         Wrench NT = new Wrench();
         NT.f.set (Vector3d.Y_UNIT);
         NT.m.cross (pnts[i], NT.f);
         constraints[i] = NT;

         Wrench DT = new Wrench();
         DT.f.set (Vector3d.X_UNIT);
         DT.m.cross (pnts[i], DT.f);
         constraints[pnts.length + 2 * i] = DT;

         DT = new Wrench();
         DT.f.set (Vector3d.Z_UNIT);
         DT.m.cross (pnts[i], DT.f);
         constraints[pnts.length + 2 * i + 1] = DT;
      }

      Twist vel0 = new Twist (Math.sin (ang), -Math.cos (ang), 0, 0, 0, 0);
      vel0.scale (9.8);

      MatrixNd A = new MatrixNd (nump, nump);
      VectorNd b = new VectorNd (nump);
      VectorNd theEst = new VectorNd (nump);

      Twist tw = new Twist();
      Wrench wr = new Wrench();
      for (int i = 0; i < nump; i++) {
         for (int j = 0; j < nump; j++) {
            Inertia.mulInverse (tw, constraints[j]);
            A.set (i, j, constraints[i].dot (tw));
         }
         b.set (i, -constraints[i].dot (vel0));
         //System.out.println ("D=" + constraints[i].toString ("%8.3f"));
      }
      CholeskyDecomposition Chol = new CholeskyDecomposition();
      Chol.factor (A);
      Chol.solve (theEst, b);
      //System.out.println ("vel0=" + vel0.toString ("%8.3f"));
      //System.out.println ("theEst=" + theEst.toString ("%8.3f"));
      // for (int i=0; i<nump; i++)
      // { wr.scale (theEst.get(i), constraints[i]);
      // Inertia.mulInverse (tw, wr);
      // vel0.add (tw);
      // }
      // System.out.println ("vel0=" + vel0.toString("%8.3f"));

      MatrixNd M = new MatrixNd (numc, numc);
      VectorNd q = new VectorNd (numc);
      VectorNd z = new VectorNd (numc);
      VectorNd w = new VectorNd (numc);
      VectorNd lo = new VectorNd (numc);
      VectorNd hi = new VectorNd (numc);

      for (int i = 0; i < numc; i++) {
         for (int j = 0; j < numc; j++) {
            Inertia.mulInverse (tw, constraints[j]);
            M.set (i, j, constraints[i].dot (tw));
         }
         q.set (i, constraints[i].dot (vel0));
      }
      for (int i = 0; i < pnts.length; i++) {
         lo.set (i, 0);
         hi.set (i, inf);

         lo.set (pnts.length + 2 * i, -theEst.get(i) * mu);
         hi.set (pnts.length + 2 * i, theEst.get(i) * mu);
         lo.set (pnts.length + 2 * i + 1, -theEst.get(i) * mu);
         hi.set (pnts.length + 2 * i + 1, theEst.get(i) * mu);
      }

      //System.out.println ("ang=" + Math.toDegrees (ang));

      testSolver (z, w, M, q, lo, hi, 0, numc, DantzigLCPSolver.Status.SOLVED);

      Twist vel = new Twist (vel0);
      for (int i = 0; i < numc; i++) {
         wr.scale (z.get(i), constraints[i]);
         Inertia.mulInverse (tw, wr);
         vel.add (tw);
      }

      //System.out.println ("z=" + z.toString ("%8.3f"));
      //System.out.println ("w=" + w.toString ("%8.3f"));
      //System.out.println ("hi=" + hi.toString ("%8.3f"));
      //System.out.println ("vel=" + vel.toString ("%8.3f"));

      // if (Math.abs(z.get(0)) > 1e-8 || Math.abs(z.get(2)) > 1e-8)
      // { throw new TestException (
      // "Only z(1) should be non-zero");
      // }
      if (ang <= Math.atan (mu)) {
         if (!vel.epsilonEquals (Twist.ZERO, 1e-8)) {
            throw new TestException ("velocity should be 0 with ang="
            + Math.toDegrees (ang));
         }
      }
      else {
         if (vel.epsilonEquals (Twist.ZERO, 1e-8)) {
            throw new TestException ("velocity should be non-zero with ang="
            + Math.toDegrees (ang));
         }
         // if (Math.abs(Math.abs(z.get(1)) - theEst*mu) > 1e-8)
         // { throw new TestException (
         // "friction force not on the cone");
         // }
      }

   }

   public void createTestCase (
      MatrixNd M, VectorNd q, VectorNd lo, VectorNd hi, int nub, int nalpha,
      int rank) {
      int size = M.rowSize();
      int nbeta = size - nalpha;
      MatrixNd N = new MatrixNd (size, rank);

      N.setRandom();
      M.mulTransposeRight (N, N);
      int[] alphaIdxs = new int[nalpha];
      for (int i = 0; i < nub; i++) {
         alphaIdxs[i] = i;
      }
      for (int i = nub; i < nalpha; i++) {
         int idx = -1;
         do {
            idx = nub + myRandom.nextInt (size - nub);
            for (int k = nub; k < i; k++) {
               if (alphaIdxs[k] == idx) {
                  idx = -1;
                  break;
               }
            }
         }
         while (idx == -1);
         alphaIdxs[i] = idx;
      }
      // System.out.print ("idxs " );
      // for (int i=0; i<alphaIdxs.length; i++)
      // { System.out.print (alphaIdxs[i] + " " );
      // }
      // System.out.println ("");
      boolean[] isAlpha = new boolean[size];
      for (int i = 0; i < nalpha; i++) {
         isAlpha[alphaIdxs[i]] = true;
      }
      int[] betaIdxs = new int[nbeta];
      int k = 0;
      for (int i = 0; i < size; i++) {
         if (!isAlpha[i]) {
            betaIdxs[k++] = i;
         }
      }

      // System.out.print ("beta " );
      // for (int i=0; i<betaIdxs.length; i++)
      // { System.out.print (betaIdxs[i] + " " );
      // }
      // System.out.println ("");

      MatrixNd Maa = new MatrixNd (nalpha, nalpha);
      MatrixNd Mbb = new MatrixNd (nbeta, nbeta);
      MatrixNd Mab = new MatrixNd (nalpha, nbeta);
      MatrixNd Mba = new MatrixNd (nbeta, nalpha);

      M.getSubMatrix (alphaIdxs, alphaIdxs, Maa);
      M.getSubMatrix (betaIdxs, betaIdxs, Mbb);
      M.getSubMatrix (alphaIdxs, betaIdxs, Mab);
      M.getSubMatrix (betaIdxs, alphaIdxs, Mba);

      // CholeskyDecomposition chol = new CholeskyDecomposition();
      // chol.factor (Maa);

      VectorNd za = new VectorNd (nalpha);
      VectorNd zb = new VectorNd (nbeta);
      VectorNd wb = new VectorNd (nbeta);
      VectorNd qa = new VectorNd (nalpha);
      VectorNd qb = new VectorNd (nbeta);

      // first, set za randomly within the prescribed range
      for (int i = 0; i < nalpha; i++) {
         double l = lo.get (alphaIdxs[i]);
         double h = hi.get (alphaIdxs[i]);
         if (l == Double.NEGATIVE_INFINITY) {
            l = -1;
         }
         if (h == Double.POSITIVE_INFINITY) {
            h = 1;
         }
         za.set (i, (h - l) * myRandom.nextDouble() + l);
      }

      // set zb to upper or lower bounds, and wb within range constraints
      for (int i = 0; i < nbeta; i++) {
         double l = lo.get (betaIdxs[i]);
         double h = hi.get (betaIdxs[i]);
         boolean setLower = true;
         if (h == Double.POSITIVE_INFINITY) {
            setLower = true;
         }
         else if (l == Double.NEGATIVE_INFINITY) {
            setLower = false;
         }
         else {
            setLower = myRandom.nextBoolean();
         }
         if (setLower) {
            zb.set (i, l);
            wb.set (i, myRandom.nextDouble());
         }
         else {
            zb.set (i, h);
            wb.set (i, -myRandom.nextDouble());
         }
      }
      // System.out.println ("za=" + za);
      VectorNd qtmp = new VectorNd();
      qb.set (wb);
      qtmp.mul (Mba, za);
      qb.sub (qtmp);
      qtmp.mul (Mbb, zb);
      qb.sub (qtmp);

      qtmp.mul (Maa, za);
      qa.negate (qtmp);
      qtmp.mul (Mab, zb);
      qa.sub (qtmp);

      for (int i = 0; i < nalpha; i++) {
         q.set (alphaIdxs[i], qa.get(i));
      }
      for (int i = 0; i < nbeta; i++) {
         q.set (betaIdxs[i], qb.get(i));
      }
   }

   public void execute() {
      testSpecial (Mvals0, qvals0);
      testSpecial (Mvals1, qvals1, loVals1, hiVals1, 0);
      //testSpecial (Mvals2, qvals2, loVals2, hiVals2, 0);

      int numRandomTests = 1000;
      int size = 50;

      MatrixNd M = new MatrixNd (size, size);
      VectorNd q = new VectorNd (size);
      VectorNd x = new VectorNd (size);
      VectorNd lo = new VectorNd (size);
      VectorNd hi = new VectorNd (size);
      for (int i = 0; i < size; i++) {
         lo.set (i, 0);
         hi.set (i, inf);
      }

      for (int i = 0; i < numRandomTests; i++) {
         M.setRandom();
         x.setRandom();
         q.mul (M, x);
         M.mulTransposeRight (M, M);
         testSolver (M, q, size, DantzigLCPSolver.Status.SOLVED);
         // testSolver (M, q, lo, hi, 0, size, DantzigLCPSolver.Status.SOLVED);

         // System.out.println (
         // "SPD "+i+", pivots=" + mySolver.getIterationCount());
      }

      MatrixNd N = new MatrixNd (size, size - size / 2);
      x.setSize (size - size / 2);

      for (int i = 0; i < numRandomTests; i++) {
         N.setRandom();
         x.setRandom();
         q.mul (N, x);
         M.mulTransposeRight (N, N);
         testSolver (M, q, size, DantzigLCPSolver.Status.SOLVED);
         // testSolver (M, q, lo, hi, 0, size, DantzigLCPSolver.Status.SOLVED);
         // System.out.println (
         // "SPSD "+i+", pivots=" + mySolver.getIterationCount());
      }

      M.setSize (15, 15);
      q.setSize (15);
      VectorNd lo0, hi0, lo1, hi1;

      lo0 =
         new VectorNd (new double[] { -inf, -inf, -inf, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0 });
      hi0 =
         new VectorNd (new double[] { inf, inf, inf, inf, inf, inf, inf, inf,
                                     inf, inf, inf, inf, inf, inf, inf });

      lo1 =
         new VectorNd (new double[] { -inf, -inf, -inf, 0, 0, 0, 0, -inf, -inf,
                                     -inf, -inf, -2, -2, -2, -2 });
      hi1 =
         new VectorNd (new double[] { inf, inf, inf, inf, inf, inf, inf, 0, 0,
                                     0, 0, 2, 2, 2, 2 });

      for (int i = 0; i < 1000; i++) {
         createTestCase (M, q, lo1, hi1, 3, 7, 15);
         testSolver (
            null, null, M, q, lo1, hi1, 3, 15, DantzigLCPSolver.Status.SOLVED);
      }
      for (int i = 0; i < 1000; i++) {
         createTestCase (M, q, lo1, hi1, 3, 7, 10);
         testSolver (
            null, null, M, q, lo1, hi1, 3, 15, DantzigLCPSolver.Status.SOLVED);
      }
      for (int i = 0; i < 1000; i++) {
         createTestCase (M, q, lo1, hi1, 0, 2, 5);
         testSolver (
            null, null, M, q, lo1, hi1, 3, 15, DantzigLCPSolver.Status.SOLVED);
      }

      for (double ang = 0; ang < Math.toRadians (45); ang += Math.toRadians (5)) {
         testSinglePointContact (ang, 0.3);
      }
      for (double ang = 0; ang < Math.toRadians (45); ang += Math.toRadians (5)) {
         testMultiPointContact (ang, 0.3);
      }

      // System.out.println ("average time, matrix size of 50: " +
      // timer.result(2*numRandomTests) +
      // ", " + pivotCnt/(2*numRandomTests) + " pivots");
      // System.out.println ("timerA: " + mySolver.getUsecA());
      // System.out.println ("timerB: " + mySolver.getUsecB());
   }

   public static void main (String[] args) {
      DantzigLCPSolverTest tester = new DantzigLCPSolverTest();
      try {
         tester.execute();
      }
      catch (Exception e) {
         e.printStackTrace();
         System.exit (1);
      }
      System.out.println ("\nPassed\n");
   }
}
