package maspack.matrix;

/**
 * Provides static methods to implement MatrixBlock.mulAdd()
 * NOTE: This code is machine generated by GenerateMulAdd
 */
public class MatrixMulAdd {

   public static void mulAdd1x1 (Matrix1x1 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 1 ||
          M2.colSize() != 1 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix1x1 A = (Matrix1x1)M1;
               Matrix1x1 B = (Matrix1x1)M2;

               double t00 = A.m00*B.m00;

               MR.m00 += t00;
               break;
            }
            case 3: {
               Matrix1x3 A = (Matrix1x3)M1;
               Matrix3x1 B = (Matrix3x1)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               break;
            }
            case 6: {
               Matrix1x6 A = (Matrix1x6)M1;
               Matrix6x1 B = (Matrix6x1)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
         }
      }
   }

   public static void mulAdd1x3 (Matrix1x3 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 1 ||
          M2.colSize() != 3 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix1x1 A = (Matrix1x1)M1;
               Matrix1x3 B = (Matrix1x3)M2;

               double t00 = A.m00*B.m00;
               double t01 = A.m00*B.m01;
               double t02 = A.m00*B.m02;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               break;
            }
            case 3: {
               Matrix1x3 A = (Matrix1x3)M1;
               Matrix3dBase B = (Matrix3dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               break;
            }
            case 6: {
               Matrix1x6 A = (Matrix1x6)M1;
               Matrix6x3 B = (Matrix6x3)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               MR.m01 += (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31 +
                          A.m04*B.m41 + A.m05*B.m51);
               MR.m02 += (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 + A.m03*B.m32 +
                          A.m04*B.m42 + A.m05*B.m52);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
         }
      }
   }

   public static void mulAdd1x6 (Matrix1x6 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 1 ||
          M2.colSize() != 6 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix1x1 A = (Matrix1x1)M1;
               Matrix1x6 B = (Matrix1x6)M2;

               double t00 = A.m00*B.m00;
               double t01 = A.m00*B.m01;
               double t02 = A.m00*B.m02;
               double t03 = A.m00*B.m03;
               double t04 = A.m00*B.m04;
               double t05 = A.m00*B.m05;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;
               break;
            }
            case 3: {
               Matrix1x3 A = (Matrix1x3)M1;
               Matrix3x6 B = (Matrix3x6)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;
               MR.m04 += A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24;
               MR.m05 += A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25;
               break;
            }
            case 6: {
               Matrix1x6 A = (Matrix1x6)M1;
               Matrix6dBase B = (Matrix6dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32 + A.m04*B.m42 + A.m05*B.m52);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33 + A.m04*B.m43 + A.m05*B.m53);
               double t04 = (A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24 +
                             A.m03*B.m34 + A.m04*B.m44 + A.m05*B.m54);
               double t05 = (A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25 +
                             A.m03*B.m35 + A.m04*B.m45 + A.m05*B.m55);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);
            MR.m04 += M1.get(0,k)*M2.get(k,4);
            MR.m05 += M1.get(0,k)*M2.get(k,5);
         }
      }
   }

   public static void mulAdd2x2 (Matrix2dBase MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 2 ||
          M2.colSize() != 2 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 2: {
               Matrix2dBase A = (Matrix2dBase)M1;
               Matrix2dBase B = (Matrix2dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10;
               double t01 = A.m00*B.m01 + A.m01*B.m11;

               double t10 = A.m10*B.m00 + A.m11*B.m10;
               double t11 = A.m10*B.m01 + A.m11*B.m11;

               MR.m00 += t00;
               MR.m01 += t01;

               MR.m10 += t10;
               MR.m11 += t11;
               break;
            }
            case 3: {
               Matrix2x3 A = (Matrix2x3)M1;
               Matrix3x2 B = (Matrix3x2)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               break;
            }
            case 6: {
               Matrix2x6 A = (Matrix2x6)M1;
               Matrix6x2 B = (Matrix6x2)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               MR.m01 += (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31 +
                          A.m04*B.m41 + A.m05*B.m51);

               MR.m10 += (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30 +
                          A.m14*B.m40 + A.m15*B.m50);
               MR.m11 += (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 + A.m13*B.m31 +
                          A.m14*B.m41 + A.m15*B.m51);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
         }
      }
   }

   public static void mulAdd2x3 (Matrix2x3 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 2 ||
          M2.colSize() != 3 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 2: {
               Matrix2dBase A = (Matrix2dBase)M1;
               Matrix2x3 B = (Matrix2x3)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10;
               double t01 = A.m00*B.m01 + A.m01*B.m11;
               double t02 = A.m00*B.m02 + A.m01*B.m12;

               double t10 = A.m10*B.m00 + A.m11*B.m10;
               double t11 = A.m10*B.m01 + A.m11*B.m11;
               double t12 = A.m10*B.m02 + A.m11*B.m12;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               break;
            }
            case 3: {
               Matrix2x3 A = (Matrix2x3)M1;
               Matrix3dBase B = (Matrix3dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               break;
            }
            case 6: {
               Matrix2x6 A = (Matrix2x6)M1;
               Matrix6x3 B = (Matrix6x3)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               MR.m01 += (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31 +
                          A.m04*B.m41 + A.m05*B.m51);
               MR.m02 += (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 + A.m03*B.m32 +
                          A.m04*B.m42 + A.m05*B.m52);

               MR.m10 += (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30 +
                          A.m14*B.m40 + A.m15*B.m50);
               MR.m11 += (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 + A.m13*B.m31 +
                          A.m14*B.m41 + A.m15*B.m51);
               MR.m12 += (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 + A.m13*B.m32 +
                          A.m14*B.m42 + A.m15*B.m52);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
         }
      }
   }

   public static void mulAdd2x6 (Matrix2x6 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 2 ||
          M2.colSize() != 6 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 2: {
               Matrix2dBase A = (Matrix2dBase)M1;
               Matrix2x6 B = (Matrix2x6)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10;
               double t01 = A.m00*B.m01 + A.m01*B.m11;
               double t02 = A.m00*B.m02 + A.m01*B.m12;
               double t03 = A.m00*B.m03 + A.m01*B.m13;
               double t04 = A.m00*B.m04 + A.m01*B.m14;
               double t05 = A.m00*B.m05 + A.m01*B.m15;

               double t10 = A.m10*B.m00 + A.m11*B.m10;
               double t11 = A.m10*B.m01 + A.m11*B.m11;
               double t12 = A.m10*B.m02 + A.m11*B.m12;
               double t13 = A.m10*B.m03 + A.m11*B.m13;
               double t14 = A.m10*B.m04 + A.m11*B.m14;
               double t15 = A.m10*B.m05 + A.m11*B.m15;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;
               MR.m14 += t14;
               MR.m15 += t15;
               break;
            }
            case 3: {
               Matrix2x3 A = (Matrix2x3)M1;
               Matrix3x6 B = (Matrix3x6)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;
               MR.m04 += A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24;
               MR.m05 += A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;
               MR.m13 += A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23;
               MR.m14 += A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24;
               MR.m15 += A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25;
               break;
            }
            case 6: {
               Matrix2x6 A = (Matrix2x6)M1;
               Matrix6dBase B = (Matrix6dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32 + A.m04*B.m42 + A.m05*B.m52);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33 + A.m04*B.m43 + A.m05*B.m53);
               double t04 = (A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24 +
                             A.m03*B.m34 + A.m04*B.m44 + A.m05*B.m54);
               double t05 = (A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25 +
                             A.m03*B.m35 + A.m04*B.m45 + A.m05*B.m55);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31 + A.m14*B.m41 + A.m15*B.m51);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32 + A.m14*B.m42 + A.m15*B.m52);
               double t13 = (A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23 +
                             A.m13*B.m33 + A.m14*B.m43 + A.m15*B.m53);
               double t14 = (A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24 +
                             A.m13*B.m34 + A.m14*B.m44 + A.m15*B.m54);
               double t15 = (A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25 +
                             A.m13*B.m35 + A.m14*B.m45 + A.m15*B.m55);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;
               MR.m14 += t14;
               MR.m15 += t15;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);
            MR.m04 += M1.get(0,k)*M2.get(k,4);
            MR.m05 += M1.get(0,k)*M2.get(k,5);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
            MR.m13 += M1.get(1,k)*M2.get(k,3);
            MR.m14 += M1.get(1,k)*M2.get(k,4);
            MR.m15 += M1.get(1,k)*M2.get(k,5);
         }
      }
   }

   public static void mulAdd3x1 (Matrix3x1 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 3 ||
          M2.colSize() != 1 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix3x1 A = (Matrix3x1)M1;
               Matrix1x1 B = (Matrix1x1)M2;

               double t00 = A.m00*B.m00;

               double t10 = A.m10*B.m00;

               double t20 = A.m20*B.m00;

               MR.m00 += t00;

               MR.m10 += t10;

               MR.m20 += t20;
               break;
            }
            case 3: {
               Matrix3dBase A = (Matrix3dBase)M1;
               Matrix3x1 B = (Matrix3x1)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;

               MR.m00 += t00;

               MR.m10 += t10;

               MR.m20 += t20;
               break;
            }
            case 6: {
               Matrix3x6 A = (Matrix3x6)M1;
               Matrix6x1 B = (Matrix6x1)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);

               MR.m10 += (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30 +
                          A.m14*B.m40 + A.m15*B.m50);

               MR.m20 += (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 + A.m23*B.m30 +
                          A.m24*B.m40 + A.m25*B.m50);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);

            MR.m10 += M1.get(1,k)*M2.get(k,0);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
         }
      }
   }

   public static void mulAdd3x2 (Matrix3x2 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 3 ||
          M2.colSize() != 2 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 2: {
               Matrix3x2 A = (Matrix3x2)M1;
               Matrix2dBase B = (Matrix2dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10;
               double t01 = A.m00*B.m01 + A.m01*B.m11;

               double t10 = A.m10*B.m00 + A.m11*B.m10;
               double t11 = A.m10*B.m01 + A.m11*B.m11;

               double t20 = A.m20*B.m00 + A.m21*B.m10;
               double t21 = A.m20*B.m01 + A.m21*B.m11;

               MR.m00 += t00;
               MR.m01 += t01;

               MR.m10 += t10;
               MR.m11 += t11;

               MR.m20 += t20;
               MR.m21 += t21;
               break;
            }
            case 3: {
               Matrix3dBase A = (Matrix3dBase)M1;
               Matrix3x2 B = (Matrix3x2)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;

               MR.m00 += t00;
               MR.m01 += t01;

               MR.m10 += t10;
               MR.m11 += t11;

               MR.m20 += t20;
               MR.m21 += t21;
               break;
            }
            case 6: {
               Matrix3x6 A = (Matrix3x6)M1;
               Matrix6x2 B = (Matrix6x2)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               MR.m01 += (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31 +
                          A.m04*B.m41 + A.m05*B.m51);

               MR.m10 += (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30 +
                          A.m14*B.m40 + A.m15*B.m50);
               MR.m11 += (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 + A.m13*B.m31 +
                          A.m14*B.m41 + A.m15*B.m51);

               MR.m20 += (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 + A.m23*B.m30 +
                          A.m24*B.m40 + A.m25*B.m50);
               MR.m21 += (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 + A.m23*B.m31 +
                          A.m24*B.m41 + A.m25*B.m51);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
         }
      }
   }

   public static void mulAdd3x3 (Matrix3dBase MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 3 ||
          M2.colSize() != 3 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix3x1 A = (Matrix3x1)M1;
               Matrix1x3 B = (Matrix1x3)M2;

               MR.m00 += A.m00*B.m00;
               MR.m01 += A.m00*B.m01;
               MR.m02 += A.m00*B.m02;

               MR.m10 += A.m10*B.m00;
               MR.m11 += A.m10*B.m01;
               MR.m12 += A.m10*B.m02;

               MR.m20 += A.m20*B.m00;
               MR.m21 += A.m20*B.m01;
               MR.m22 += A.m20*B.m02;
               break;
            }
            case 2: {
               Matrix3x2 A = (Matrix3x2)M1;
               Matrix2x3 B = (Matrix2x3)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12;
               break;
            }
            case 3: {
               Matrix3dBase A = (Matrix3dBase)M1;
               Matrix3dBase B = (Matrix3dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               double t22 = A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               break;
            }
            case 4: {
               Matrix3x4 A = (Matrix3x4)M1;
               Matrix4x3 B = (Matrix4x3)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 + A.m03*B.m32;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 + A.m13*B.m31;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 + A.m13*B.m32;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 + A.m23*B.m30;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 + A.m23*B.m31;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 + A.m23*B.m32;
               break;
            }
            case 6: {
               Matrix3x6 A = (Matrix3x6)M1;
               Matrix6x3 B = (Matrix6x3)M2;

               MR.m00 += (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 + A.m03*B.m30 +
                          A.m04*B.m40 + A.m05*B.m50);
               MR.m01 += (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 + A.m03*B.m31 +
                          A.m04*B.m41 + A.m05*B.m51);
               MR.m02 += (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 + A.m03*B.m32 +
                          A.m04*B.m42 + A.m05*B.m52);

               MR.m10 += (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 + A.m13*B.m30 +
                          A.m14*B.m40 + A.m15*B.m50);
               MR.m11 += (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 + A.m13*B.m31 +
                          A.m14*B.m41 + A.m15*B.m51);
               MR.m12 += (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 + A.m13*B.m32 +
                          A.m14*B.m42 + A.m15*B.m52);

               MR.m20 += (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 + A.m23*B.m30 +
                          A.m24*B.m40 + A.m25*B.m50);
               MR.m21 += (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 + A.m23*B.m31 +
                          A.m24*B.m41 + A.m25*B.m51);
               MR.m22 += (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 + A.m23*B.m32 +
                          A.m24*B.m42 + A.m25*B.m52);
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);
         }
      }
   }

   public static void mulAdd3x4 (Matrix3x4 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 3 ||
          M2.colSize() != 4 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 3: {
               Matrix3dBase A = (Matrix3dBase)M1;
               Matrix3x4 B = (Matrix3x4)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               double t03 = A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;
               double t13 = A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               double t22 = A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;
               double t23 = A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;
               break;
            }
            case 4: {
               Matrix3x4 A = (Matrix3x4)M1;
               Matrix4dBase B = (Matrix4dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32);
               double t13 = (A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23 +
                             A.m13*B.m33);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32);
               double t23 = (A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23 +
                             A.m23*B.m33);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
            MR.m13 += M1.get(1,k)*M2.get(k,3);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);
            MR.m23 += M1.get(2,k)*M2.get(k,3);
         }
      }
   }

   public static void mulAdd3x6 (Matrix3x6 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 3 ||
          M2.colSize() != 6 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix3x1 A = (Matrix3x1)M1;
               Matrix1x6 B = (Matrix1x6)M2;

               MR.m00 += A.m00*B.m00;
               MR.m01 += A.m00*B.m01;
               MR.m02 += A.m00*B.m02;
               MR.m03 += A.m00*B.m03;
               MR.m04 += A.m00*B.m04;
               MR.m05 += A.m00*B.m05;

               MR.m10 += A.m10*B.m00;
               MR.m11 += A.m10*B.m01;
               MR.m12 += A.m10*B.m02;
               MR.m13 += A.m10*B.m03;
               MR.m14 += A.m10*B.m04;
               MR.m15 += A.m10*B.m05;

               MR.m20 += A.m20*B.m00;
               MR.m21 += A.m20*B.m01;
               MR.m22 += A.m20*B.m02;
               MR.m23 += A.m20*B.m03;
               MR.m24 += A.m20*B.m04;
               MR.m25 += A.m20*B.m05;
               break;
            }
            case 2: {
               Matrix3x2 A = (Matrix3x2)M1;
               Matrix2x6 B = (Matrix2x6)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13;
               MR.m04 += A.m00*B.m04 + A.m01*B.m14;
               MR.m05 += A.m00*B.m05 + A.m01*B.m15;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12;
               MR.m13 += A.m10*B.m03 + A.m11*B.m13;
               MR.m14 += A.m10*B.m04 + A.m11*B.m14;
               MR.m15 += A.m10*B.m05 + A.m11*B.m15;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12;
               MR.m23 += A.m20*B.m03 + A.m21*B.m13;
               MR.m24 += A.m20*B.m04 + A.m21*B.m14;
               MR.m25 += A.m20*B.m05 + A.m21*B.m15;
               break;
            }
            case 3: {
               Matrix3dBase A = (Matrix3dBase)M1;
               Matrix3x6 B = (Matrix3x6)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               double t03 = A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;
               double t04 = A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24;
               double t05 = A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;
               double t13 = A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23;
               double t14 = A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24;
               double t15 = A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               double t22 = A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;
               double t23 = A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23;
               double t24 = A.m20*B.m04 + A.m21*B.m14 + A.m22*B.m24;
               double t25 = A.m20*B.m05 + A.m21*B.m15 + A.m22*B.m25;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;
               MR.m14 += t14;
               MR.m15 += t15;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;
               MR.m24 += t24;
               MR.m25 += t25;
               break;
            }
            case 6: {
               Matrix3x6 A = (Matrix3x6)M1;
               Matrix6dBase B = (Matrix6dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32 + A.m04*B.m42 + A.m05*B.m52);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33 + A.m04*B.m43 + A.m05*B.m53);
               double t04 = (A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24 +
                             A.m03*B.m34 + A.m04*B.m44 + A.m05*B.m54);
               double t05 = (A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25 +
                             A.m03*B.m35 + A.m04*B.m45 + A.m05*B.m55);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31 + A.m14*B.m41 + A.m15*B.m51);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32 + A.m14*B.m42 + A.m15*B.m52);
               double t13 = (A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23 +
                             A.m13*B.m33 + A.m14*B.m43 + A.m15*B.m53);
               double t14 = (A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24 +
                             A.m13*B.m34 + A.m14*B.m44 + A.m15*B.m54);
               double t15 = (A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25 +
                             A.m13*B.m35 + A.m14*B.m45 + A.m15*B.m55);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30 + A.m24*B.m40 + A.m25*B.m50);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31 + A.m24*B.m41 + A.m25*B.m51);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32 + A.m24*B.m42 + A.m25*B.m52);
               double t23 = (A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23 +
                             A.m23*B.m33 + A.m24*B.m43 + A.m25*B.m53);
               double t24 = (A.m20*B.m04 + A.m21*B.m14 + A.m22*B.m24 +
                             A.m23*B.m34 + A.m24*B.m44 + A.m25*B.m54);
               double t25 = (A.m20*B.m05 + A.m21*B.m15 + A.m22*B.m25 +
                             A.m23*B.m35 + A.m24*B.m45 + A.m25*B.m55);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;
               MR.m14 += t14;
               MR.m15 += t15;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;
               MR.m24 += t24;
               MR.m25 += t25;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);
            MR.m04 += M1.get(0,k)*M2.get(k,4);
            MR.m05 += M1.get(0,k)*M2.get(k,5);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
            MR.m13 += M1.get(1,k)*M2.get(k,3);
            MR.m14 += M1.get(1,k)*M2.get(k,4);
            MR.m15 += M1.get(1,k)*M2.get(k,5);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);
            MR.m23 += M1.get(2,k)*M2.get(k,3);
            MR.m24 += M1.get(2,k)*M2.get(k,4);
            MR.m25 += M1.get(2,k)*M2.get(k,5);
         }
      }
   }

   public static void mulAdd4x3 (Matrix4x3 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 4 ||
          M2.colSize() != 3 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 3: {
               Matrix4x3 A = (Matrix4x3)M1;
               Matrix3dBase B = (Matrix3dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               double t22 = A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;

               double t30 = A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;
               double t31 = A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21;
               double t32 = A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;
               break;
            }
            case 4: {
               Matrix4dBase A = (Matrix4dBase)M1;
               Matrix4x3 B = (Matrix4x3)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30);
               double t31 = (A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21 +
                             A.m33*B.m31);
               double t32 = (A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22 +
                             A.m33*B.m32);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);

            MR.m30 += M1.get(3,k)*M2.get(k,0);
            MR.m31 += M1.get(3,k)*M2.get(k,1);
            MR.m32 += M1.get(3,k)*M2.get(k,2);
         }
      }
   }

   public static void mulAdd4x4 (Matrix4dBase MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 4 ||
          M2.colSize() != 4 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 3: {
               Matrix4x3 A = (Matrix4x3)M1;
               Matrix3x4 B = (Matrix3x4)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;
               MR.m13 += A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;
               MR.m23 += A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;
               MR.m31 += A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21;
               MR.m32 += A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22;
               MR.m33 += A.m30*B.m03 + A.m31*B.m13 + A.m32*B.m23;
               break;
            }
            case 4: {
               Matrix4dBase A = (Matrix4dBase)M1;
               Matrix4dBase B = (Matrix4dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32);
               double t13 = (A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23 +
                             A.m13*B.m33);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32);
               double t23 = (A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23 +
                             A.m23*B.m33);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30);
               double t31 = (A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21 +
                             A.m33*B.m31);
               double t32 = (A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22 +
                             A.m33*B.m32);
               double t33 = (A.m30*B.m03 + A.m31*B.m13 + A.m32*B.m23 +
                             A.m33*B.m33);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;
               MR.m33 += t33;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
            MR.m13 += M1.get(1,k)*M2.get(k,3);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);
            MR.m23 += M1.get(2,k)*M2.get(k,3);

            MR.m30 += M1.get(3,k)*M2.get(k,0);
            MR.m31 += M1.get(3,k)*M2.get(k,1);
            MR.m32 += M1.get(3,k)*M2.get(k,2);
            MR.m33 += M1.get(3,k)*M2.get(k,3);
         }
      }
   }

   public static void mulAdd6x1 (Matrix6x1 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 6 ||
          M2.colSize() != 1 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix6x1 A = (Matrix6x1)M1;
               Matrix1x1 B = (Matrix1x1)M2;

               double t00 = A.m00*B.m00;

               double t10 = A.m10*B.m00;

               double t20 = A.m20*B.m00;

               double t30 = A.m30*B.m00;

               double t40 = A.m40*B.m00;

               double t50 = A.m50*B.m00;

               MR.m00 += t00;

               MR.m10 += t10;

               MR.m20 += t20;

               MR.m30 += t30;

               MR.m40 += t40;

               MR.m50 += t50;
               break;
            }
            case 3: {
               Matrix6x3 A = (Matrix6x3)M1;
               Matrix3x1 B = (Matrix3x1)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;

               MR.m40 += A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20;

               MR.m50 += A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20;
               break;
            }
            case 6: {
               Matrix6dBase A = (Matrix6dBase)M1;
               Matrix6x1 B = (Matrix6x1)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30 + A.m24*B.m40 + A.m25*B.m50);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30 + A.m34*B.m40 + A.m35*B.m50);

               double t40 = (A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20 +
                             A.m43*B.m30 + A.m44*B.m40 + A.m45*B.m50);

               double t50 = (A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20 +
                             A.m53*B.m30 + A.m54*B.m40 + A.m55*B.m50);

               MR.m00 += t00;

               MR.m10 += t10;

               MR.m20 += t20;

               MR.m30 += t30;

               MR.m40 += t40;

               MR.m50 += t50;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);

            MR.m10 += M1.get(1,k)*M2.get(k,0);

            MR.m20 += M1.get(2,k)*M2.get(k,0);

            MR.m30 += M1.get(3,k)*M2.get(k,0);

            MR.m40 += M1.get(4,k)*M2.get(k,0);

            MR.m50 += M1.get(5,k)*M2.get(k,0);
         }
      }
   }

   public static void mulAdd6x2 (Matrix6x2 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 6 ||
          M2.colSize() != 2 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 2: {
               Matrix6x2 A = (Matrix6x2)M1;
               Matrix2dBase B = (Matrix2dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10;
               double t01 = A.m00*B.m01 + A.m01*B.m11;

               double t10 = A.m10*B.m00 + A.m11*B.m10;
               double t11 = A.m10*B.m01 + A.m11*B.m11;

               double t20 = A.m20*B.m00 + A.m21*B.m10;
               double t21 = A.m20*B.m01 + A.m21*B.m11;

               double t30 = A.m30*B.m00 + A.m31*B.m10;
               double t31 = A.m30*B.m01 + A.m31*B.m11;

               double t40 = A.m40*B.m00 + A.m41*B.m10;
               double t41 = A.m40*B.m01 + A.m41*B.m11;

               double t50 = A.m50*B.m00 + A.m51*B.m10;
               double t51 = A.m50*B.m01 + A.m51*B.m11;

               MR.m00 += t00;
               MR.m01 += t01;

               MR.m10 += t10;
               MR.m11 += t11;

               MR.m20 += t20;
               MR.m21 += t21;

               MR.m30 += t30;
               MR.m31 += t31;

               MR.m40 += t40;
               MR.m41 += t41;

               MR.m50 += t50;
               MR.m51 += t51;
               break;
            }
            case 3: {
               Matrix6x3 A = (Matrix6x3)M1;
               Matrix3x2 B = (Matrix3x2)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;
               MR.m31 += A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21;

               MR.m40 += A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20;
               MR.m41 += A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21;

               MR.m50 += A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20;
               MR.m51 += A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21;
               break;
            }
            case 6: {
               Matrix6dBase A = (Matrix6dBase)M1;
               Matrix6x2 B = (Matrix6x2)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31 + A.m14*B.m41 + A.m15*B.m51);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30 + A.m24*B.m40 + A.m25*B.m50);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31 + A.m24*B.m41 + A.m25*B.m51);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30 + A.m34*B.m40 + A.m35*B.m50);
               double t31 = (A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21 +
                             A.m33*B.m31 + A.m34*B.m41 + A.m35*B.m51);

               double t40 = (A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20 +
                             A.m43*B.m30 + A.m44*B.m40 + A.m45*B.m50);
               double t41 = (A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21 +
                             A.m43*B.m31 + A.m44*B.m41 + A.m45*B.m51);

               double t50 = (A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20 +
                             A.m53*B.m30 + A.m54*B.m40 + A.m55*B.m50);
               double t51 = (A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21 +
                             A.m53*B.m31 + A.m54*B.m41 + A.m55*B.m51);

               MR.m00 += t00;
               MR.m01 += t01;

               MR.m10 += t10;
               MR.m11 += t11;

               MR.m20 += t20;
               MR.m21 += t21;

               MR.m30 += t30;
               MR.m31 += t31;

               MR.m40 += t40;
               MR.m41 += t41;

               MR.m50 += t50;
               MR.m51 += t51;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);

            MR.m30 += M1.get(3,k)*M2.get(k,0);
            MR.m31 += M1.get(3,k)*M2.get(k,1);

            MR.m40 += M1.get(4,k)*M2.get(k,0);
            MR.m41 += M1.get(4,k)*M2.get(k,1);

            MR.m50 += M1.get(5,k)*M2.get(k,0);
            MR.m51 += M1.get(5,k)*M2.get(k,1);
         }
      }
   }

   public static void mulAdd6x3 (Matrix6x3 MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 6 ||
          M2.colSize() != 3 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix6x1 A = (Matrix6x1)M1;
               Matrix1x3 B = (Matrix1x3)M2;

               MR.m00 += A.m00*B.m00;
               MR.m01 += A.m00*B.m01;
               MR.m02 += A.m00*B.m02;

               MR.m10 += A.m10*B.m00;
               MR.m11 += A.m10*B.m01;
               MR.m12 += A.m10*B.m02;

               MR.m20 += A.m20*B.m00;
               MR.m21 += A.m20*B.m01;
               MR.m22 += A.m20*B.m02;

               MR.m30 += A.m30*B.m00;
               MR.m31 += A.m30*B.m01;
               MR.m32 += A.m30*B.m02;

               MR.m40 += A.m40*B.m00;
               MR.m41 += A.m40*B.m01;
               MR.m42 += A.m40*B.m02;

               MR.m50 += A.m50*B.m00;
               MR.m51 += A.m50*B.m01;
               MR.m52 += A.m50*B.m02;
               break;
            }
            case 2: {
               Matrix6x2 A = (Matrix6x2)M1;
               Matrix2x3 B = (Matrix2x3)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10;
               MR.m31 += A.m30*B.m01 + A.m31*B.m11;
               MR.m32 += A.m30*B.m02 + A.m31*B.m12;

               MR.m40 += A.m40*B.m00 + A.m41*B.m10;
               MR.m41 += A.m40*B.m01 + A.m41*B.m11;
               MR.m42 += A.m40*B.m02 + A.m41*B.m12;

               MR.m50 += A.m50*B.m00 + A.m51*B.m10;
               MR.m51 += A.m50*B.m01 + A.m51*B.m11;
               MR.m52 += A.m50*B.m02 + A.m51*B.m12;
               break;
            }
            case 3: {
               Matrix6x3 A = (Matrix6x3)M1;
               Matrix3dBase B = (Matrix3dBase)M2;

               double t00 = A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               double t01 = A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               double t02 = A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;

               double t10 = A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               double t11 = A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               double t12 = A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;

               double t20 = A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               double t21 = A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               double t22 = A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;

               double t30 = A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;
               double t31 = A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21;
               double t32 = A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22;

               double t40 = A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20;
               double t41 = A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21;
               double t42 = A.m40*B.m02 + A.m41*B.m12 + A.m42*B.m22;

               double t50 = A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20;
               double t51 = A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21;
               double t52 = A.m50*B.m02 + A.m51*B.m12 + A.m52*B.m22;

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;

               MR.m40 += t40;
               MR.m41 += t41;
               MR.m42 += t42;

               MR.m50 += t50;
               MR.m51 += t51;
               MR.m52 += t52;
               break;
            }
            case 6: {
               Matrix6dBase A = (Matrix6dBase)M1;
               Matrix6x3 B = (Matrix6x3)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32 + A.m04*B.m42 + A.m05*B.m52);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31 + A.m14*B.m41 + A.m15*B.m51);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32 + A.m14*B.m42 + A.m15*B.m52);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30 + A.m24*B.m40 + A.m25*B.m50);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31 + A.m24*B.m41 + A.m25*B.m51);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32 + A.m24*B.m42 + A.m25*B.m52);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30 + A.m34*B.m40 + A.m35*B.m50);
               double t31 = (A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21 +
                             A.m33*B.m31 + A.m34*B.m41 + A.m35*B.m51);
               double t32 = (A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22 +
                             A.m33*B.m32 + A.m34*B.m42 + A.m35*B.m52);

               double t40 = (A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20 +
                             A.m43*B.m30 + A.m44*B.m40 + A.m45*B.m50);
               double t41 = (A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21 +
                             A.m43*B.m31 + A.m44*B.m41 + A.m45*B.m51);
               double t42 = (A.m40*B.m02 + A.m41*B.m12 + A.m42*B.m22 +
                             A.m43*B.m32 + A.m44*B.m42 + A.m45*B.m52);

               double t50 = (A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20 +
                             A.m53*B.m30 + A.m54*B.m40 + A.m55*B.m50);
               double t51 = (A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21 +
                             A.m53*B.m31 + A.m54*B.m41 + A.m55*B.m51);
               double t52 = (A.m50*B.m02 + A.m51*B.m12 + A.m52*B.m22 +
                             A.m53*B.m32 + A.m54*B.m42 + A.m55*B.m52);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;

               MR.m40 += t40;
               MR.m41 += t41;
               MR.m42 += t42;

               MR.m50 += t50;
               MR.m51 += t51;
               MR.m52 += t52;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);

            MR.m30 += M1.get(3,k)*M2.get(k,0);
            MR.m31 += M1.get(3,k)*M2.get(k,1);
            MR.m32 += M1.get(3,k)*M2.get(k,2);

            MR.m40 += M1.get(4,k)*M2.get(k,0);
            MR.m41 += M1.get(4,k)*M2.get(k,1);
            MR.m42 += M1.get(4,k)*M2.get(k,2);

            MR.m50 += M1.get(5,k)*M2.get(k,0);
            MR.m51 += M1.get(5,k)*M2.get(k,1);
            MR.m52 += M1.get(5,k)*M2.get(k,2);
         }
      }
   }

   public static void mulAdd6x6 (Matrix6dBase MR, Matrix M1, Matrix M2) {
      if (M1.rowSize() != 6 ||
          M2.colSize() != 6 ||
          M1.colSize() != M2.rowSize()) {
         throw new ImproperSizeException (
            "matrix sizes "+M1.getSize()+" and "+M2.getSize()+
            " do not conform to "+MR.getSize());
      }
      if (M1.isFixedSize() && M2.isFixedSize()) {
         switch (M1.colSize()) {
            case 1: {
               Matrix6x1 A = (Matrix6x1)M1;
               Matrix1x6 B = (Matrix1x6)M2;

               MR.m00 += A.m00*B.m00;
               MR.m01 += A.m00*B.m01;
               MR.m02 += A.m00*B.m02;
               MR.m03 += A.m00*B.m03;
               MR.m04 += A.m00*B.m04;
               MR.m05 += A.m00*B.m05;

               MR.m10 += A.m10*B.m00;
               MR.m11 += A.m10*B.m01;
               MR.m12 += A.m10*B.m02;
               MR.m13 += A.m10*B.m03;
               MR.m14 += A.m10*B.m04;
               MR.m15 += A.m10*B.m05;

               MR.m20 += A.m20*B.m00;
               MR.m21 += A.m20*B.m01;
               MR.m22 += A.m20*B.m02;
               MR.m23 += A.m20*B.m03;
               MR.m24 += A.m20*B.m04;
               MR.m25 += A.m20*B.m05;

               MR.m30 += A.m30*B.m00;
               MR.m31 += A.m30*B.m01;
               MR.m32 += A.m30*B.m02;
               MR.m33 += A.m30*B.m03;
               MR.m34 += A.m30*B.m04;
               MR.m35 += A.m30*B.m05;

               MR.m40 += A.m40*B.m00;
               MR.m41 += A.m40*B.m01;
               MR.m42 += A.m40*B.m02;
               MR.m43 += A.m40*B.m03;
               MR.m44 += A.m40*B.m04;
               MR.m45 += A.m40*B.m05;

               MR.m50 += A.m50*B.m00;
               MR.m51 += A.m50*B.m01;
               MR.m52 += A.m50*B.m02;
               MR.m53 += A.m50*B.m03;
               MR.m54 += A.m50*B.m04;
               MR.m55 += A.m50*B.m05;
               break;
            }
            case 2: {
               Matrix6x2 A = (Matrix6x2)M1;
               Matrix2x6 B = (Matrix2x6)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13;
               MR.m04 += A.m00*B.m04 + A.m01*B.m14;
               MR.m05 += A.m00*B.m05 + A.m01*B.m15;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12;
               MR.m13 += A.m10*B.m03 + A.m11*B.m13;
               MR.m14 += A.m10*B.m04 + A.m11*B.m14;
               MR.m15 += A.m10*B.m05 + A.m11*B.m15;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12;
               MR.m23 += A.m20*B.m03 + A.m21*B.m13;
               MR.m24 += A.m20*B.m04 + A.m21*B.m14;
               MR.m25 += A.m20*B.m05 + A.m21*B.m15;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10;
               MR.m31 += A.m30*B.m01 + A.m31*B.m11;
               MR.m32 += A.m30*B.m02 + A.m31*B.m12;
               MR.m33 += A.m30*B.m03 + A.m31*B.m13;
               MR.m34 += A.m30*B.m04 + A.m31*B.m14;
               MR.m35 += A.m30*B.m05 + A.m31*B.m15;

               MR.m40 += A.m40*B.m00 + A.m41*B.m10;
               MR.m41 += A.m40*B.m01 + A.m41*B.m11;
               MR.m42 += A.m40*B.m02 + A.m41*B.m12;
               MR.m43 += A.m40*B.m03 + A.m41*B.m13;
               MR.m44 += A.m40*B.m04 + A.m41*B.m14;
               MR.m45 += A.m40*B.m05 + A.m41*B.m15;

               MR.m50 += A.m50*B.m00 + A.m51*B.m10;
               MR.m51 += A.m50*B.m01 + A.m51*B.m11;
               MR.m52 += A.m50*B.m02 + A.m51*B.m12;
               MR.m53 += A.m50*B.m03 + A.m51*B.m13;
               MR.m54 += A.m50*B.m04 + A.m51*B.m14;
               MR.m55 += A.m50*B.m05 + A.m51*B.m15;
               break;
            }
            case 3: {
               Matrix6x3 A = (Matrix6x3)M1;
               Matrix3x6 B = (Matrix3x6)M2;

               MR.m00 += A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20;
               MR.m01 += A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21;
               MR.m02 += A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22;
               MR.m03 += A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23;
               MR.m04 += A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24;
               MR.m05 += A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25;

               MR.m10 += A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20;
               MR.m11 += A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21;
               MR.m12 += A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22;
               MR.m13 += A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23;
               MR.m14 += A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24;
               MR.m15 += A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25;

               MR.m20 += A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20;
               MR.m21 += A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21;
               MR.m22 += A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22;
               MR.m23 += A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23;
               MR.m24 += A.m20*B.m04 + A.m21*B.m14 + A.m22*B.m24;
               MR.m25 += A.m20*B.m05 + A.m21*B.m15 + A.m22*B.m25;

               MR.m30 += A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20;
               MR.m31 += A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21;
               MR.m32 += A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22;
               MR.m33 += A.m30*B.m03 + A.m31*B.m13 + A.m32*B.m23;
               MR.m34 += A.m30*B.m04 + A.m31*B.m14 + A.m32*B.m24;
               MR.m35 += A.m30*B.m05 + A.m31*B.m15 + A.m32*B.m25;

               MR.m40 += A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20;
               MR.m41 += A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21;
               MR.m42 += A.m40*B.m02 + A.m41*B.m12 + A.m42*B.m22;
               MR.m43 += A.m40*B.m03 + A.m41*B.m13 + A.m42*B.m23;
               MR.m44 += A.m40*B.m04 + A.m41*B.m14 + A.m42*B.m24;
               MR.m45 += A.m40*B.m05 + A.m41*B.m15 + A.m42*B.m25;

               MR.m50 += A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20;
               MR.m51 += A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21;
               MR.m52 += A.m50*B.m02 + A.m51*B.m12 + A.m52*B.m22;
               MR.m53 += A.m50*B.m03 + A.m51*B.m13 + A.m52*B.m23;
               MR.m54 += A.m50*B.m04 + A.m51*B.m14 + A.m52*B.m24;
               MR.m55 += A.m50*B.m05 + A.m51*B.m15 + A.m52*B.m25;
               break;
            }
            case 6: {
               Matrix6dBase A = (Matrix6dBase)M1;
               Matrix6dBase B = (Matrix6dBase)M2;

               double t00 = (A.m00*B.m00 + A.m01*B.m10 + A.m02*B.m20 +
                             A.m03*B.m30 + A.m04*B.m40 + A.m05*B.m50);
               double t01 = (A.m00*B.m01 + A.m01*B.m11 + A.m02*B.m21 +
                             A.m03*B.m31 + A.m04*B.m41 + A.m05*B.m51);
               double t02 = (A.m00*B.m02 + A.m01*B.m12 + A.m02*B.m22 +
                             A.m03*B.m32 + A.m04*B.m42 + A.m05*B.m52);
               double t03 = (A.m00*B.m03 + A.m01*B.m13 + A.m02*B.m23 +
                             A.m03*B.m33 + A.m04*B.m43 + A.m05*B.m53);
               double t04 = (A.m00*B.m04 + A.m01*B.m14 + A.m02*B.m24 +
                             A.m03*B.m34 + A.m04*B.m44 + A.m05*B.m54);
               double t05 = (A.m00*B.m05 + A.m01*B.m15 + A.m02*B.m25 +
                             A.m03*B.m35 + A.m04*B.m45 + A.m05*B.m55);

               double t10 = (A.m10*B.m00 + A.m11*B.m10 + A.m12*B.m20 +
                             A.m13*B.m30 + A.m14*B.m40 + A.m15*B.m50);
               double t11 = (A.m10*B.m01 + A.m11*B.m11 + A.m12*B.m21 +
                             A.m13*B.m31 + A.m14*B.m41 + A.m15*B.m51);
               double t12 = (A.m10*B.m02 + A.m11*B.m12 + A.m12*B.m22 +
                             A.m13*B.m32 + A.m14*B.m42 + A.m15*B.m52);
               double t13 = (A.m10*B.m03 + A.m11*B.m13 + A.m12*B.m23 +
                             A.m13*B.m33 + A.m14*B.m43 + A.m15*B.m53);
               double t14 = (A.m10*B.m04 + A.m11*B.m14 + A.m12*B.m24 +
                             A.m13*B.m34 + A.m14*B.m44 + A.m15*B.m54);
               double t15 = (A.m10*B.m05 + A.m11*B.m15 + A.m12*B.m25 +
                             A.m13*B.m35 + A.m14*B.m45 + A.m15*B.m55);

               double t20 = (A.m20*B.m00 + A.m21*B.m10 + A.m22*B.m20 +
                             A.m23*B.m30 + A.m24*B.m40 + A.m25*B.m50);
               double t21 = (A.m20*B.m01 + A.m21*B.m11 + A.m22*B.m21 +
                             A.m23*B.m31 + A.m24*B.m41 + A.m25*B.m51);
               double t22 = (A.m20*B.m02 + A.m21*B.m12 + A.m22*B.m22 +
                             A.m23*B.m32 + A.m24*B.m42 + A.m25*B.m52);
               double t23 = (A.m20*B.m03 + A.m21*B.m13 + A.m22*B.m23 +
                             A.m23*B.m33 + A.m24*B.m43 + A.m25*B.m53);
               double t24 = (A.m20*B.m04 + A.m21*B.m14 + A.m22*B.m24 +
                             A.m23*B.m34 + A.m24*B.m44 + A.m25*B.m54);
               double t25 = (A.m20*B.m05 + A.m21*B.m15 + A.m22*B.m25 +
                             A.m23*B.m35 + A.m24*B.m45 + A.m25*B.m55);

               double t30 = (A.m30*B.m00 + A.m31*B.m10 + A.m32*B.m20 +
                             A.m33*B.m30 + A.m34*B.m40 + A.m35*B.m50);
               double t31 = (A.m30*B.m01 + A.m31*B.m11 + A.m32*B.m21 +
                             A.m33*B.m31 + A.m34*B.m41 + A.m35*B.m51);
               double t32 = (A.m30*B.m02 + A.m31*B.m12 + A.m32*B.m22 +
                             A.m33*B.m32 + A.m34*B.m42 + A.m35*B.m52);
               double t33 = (A.m30*B.m03 + A.m31*B.m13 + A.m32*B.m23 +
                             A.m33*B.m33 + A.m34*B.m43 + A.m35*B.m53);
               double t34 = (A.m30*B.m04 + A.m31*B.m14 + A.m32*B.m24 +
                             A.m33*B.m34 + A.m34*B.m44 + A.m35*B.m54);
               double t35 = (A.m30*B.m05 + A.m31*B.m15 + A.m32*B.m25 +
                             A.m33*B.m35 + A.m34*B.m45 + A.m35*B.m55);

               double t40 = (A.m40*B.m00 + A.m41*B.m10 + A.m42*B.m20 +
                             A.m43*B.m30 + A.m44*B.m40 + A.m45*B.m50);
               double t41 = (A.m40*B.m01 + A.m41*B.m11 + A.m42*B.m21 +
                             A.m43*B.m31 + A.m44*B.m41 + A.m45*B.m51);
               double t42 = (A.m40*B.m02 + A.m41*B.m12 + A.m42*B.m22 +
                             A.m43*B.m32 + A.m44*B.m42 + A.m45*B.m52);
               double t43 = (A.m40*B.m03 + A.m41*B.m13 + A.m42*B.m23 +
                             A.m43*B.m33 + A.m44*B.m43 + A.m45*B.m53);
               double t44 = (A.m40*B.m04 + A.m41*B.m14 + A.m42*B.m24 +
                             A.m43*B.m34 + A.m44*B.m44 + A.m45*B.m54);
               double t45 = (A.m40*B.m05 + A.m41*B.m15 + A.m42*B.m25 +
                             A.m43*B.m35 + A.m44*B.m45 + A.m45*B.m55);

               double t50 = (A.m50*B.m00 + A.m51*B.m10 + A.m52*B.m20 +
                             A.m53*B.m30 + A.m54*B.m40 + A.m55*B.m50);
               double t51 = (A.m50*B.m01 + A.m51*B.m11 + A.m52*B.m21 +
                             A.m53*B.m31 + A.m54*B.m41 + A.m55*B.m51);
               double t52 = (A.m50*B.m02 + A.m51*B.m12 + A.m52*B.m22 +
                             A.m53*B.m32 + A.m54*B.m42 + A.m55*B.m52);
               double t53 = (A.m50*B.m03 + A.m51*B.m13 + A.m52*B.m23 +
                             A.m53*B.m33 + A.m54*B.m43 + A.m55*B.m53);
               double t54 = (A.m50*B.m04 + A.m51*B.m14 + A.m52*B.m24 +
                             A.m53*B.m34 + A.m54*B.m44 + A.m55*B.m54);
               double t55 = (A.m50*B.m05 + A.m51*B.m15 + A.m52*B.m25 +
                             A.m53*B.m35 + A.m54*B.m45 + A.m55*B.m55);

               MR.m00 += t00;
               MR.m01 += t01;
               MR.m02 += t02;
               MR.m03 += t03;
               MR.m04 += t04;
               MR.m05 += t05;

               MR.m10 += t10;
               MR.m11 += t11;
               MR.m12 += t12;
               MR.m13 += t13;
               MR.m14 += t14;
               MR.m15 += t15;

               MR.m20 += t20;
               MR.m21 += t21;
               MR.m22 += t22;
               MR.m23 += t23;
               MR.m24 += t24;
               MR.m25 += t25;

               MR.m30 += t30;
               MR.m31 += t31;
               MR.m32 += t32;
               MR.m33 += t33;
               MR.m34 += t34;
               MR.m35 += t35;

               MR.m40 += t40;
               MR.m41 += t41;
               MR.m42 += t42;
               MR.m43 += t43;
               MR.m44 += t44;
               MR.m45 += t45;

               MR.m50 += t50;
               MR.m51 += t51;
               MR.m52 += t52;
               MR.m53 += t53;
               MR.m54 += t54;
               MR.m55 += t55;
               break;
            }
         }
      }
      else {
         for (int k=0; k<M1.colSize(); k++) {
            MR.m00 += M1.get(0,k)*M2.get(k,0);
            MR.m01 += M1.get(0,k)*M2.get(k,1);
            MR.m02 += M1.get(0,k)*M2.get(k,2);
            MR.m03 += M1.get(0,k)*M2.get(k,3);
            MR.m04 += M1.get(0,k)*M2.get(k,4);
            MR.m05 += M1.get(0,k)*M2.get(k,5);

            MR.m10 += M1.get(1,k)*M2.get(k,0);
            MR.m11 += M1.get(1,k)*M2.get(k,1);
            MR.m12 += M1.get(1,k)*M2.get(k,2);
            MR.m13 += M1.get(1,k)*M2.get(k,3);
            MR.m14 += M1.get(1,k)*M2.get(k,4);
            MR.m15 += M1.get(1,k)*M2.get(k,5);

            MR.m20 += M1.get(2,k)*M2.get(k,0);
            MR.m21 += M1.get(2,k)*M2.get(k,1);
            MR.m22 += M1.get(2,k)*M2.get(k,2);
            MR.m23 += M1.get(2,k)*M2.get(k,3);
            MR.m24 += M1.get(2,k)*M2.get(k,4);
            MR.m25 += M1.get(2,k)*M2.get(k,5);

            MR.m30 += M1.get(3,k)*M2.get(k,0);
            MR.m31 += M1.get(3,k)*M2.get(k,1);
            MR.m32 += M1.get(3,k)*M2.get(k,2);
            MR.m33 += M1.get(3,k)*M2.get(k,3);
            MR.m34 += M1.get(3,k)*M2.get(k,4);
            MR.m35 += M1.get(3,k)*M2.get(k,5);

            MR.m40 += M1.get(4,k)*M2.get(k,0);
            MR.m41 += M1.get(4,k)*M2.get(k,1);
            MR.m42 += M1.get(4,k)*M2.get(k,2);
            MR.m43 += M1.get(4,k)*M2.get(k,3);
            MR.m44 += M1.get(4,k)*M2.get(k,4);
            MR.m45 += M1.get(4,k)*M2.get(k,5);

            MR.m50 += M1.get(5,k)*M2.get(k,0);
            MR.m51 += M1.get(5,k)*M2.get(k,1);
            MR.m52 += M1.get(5,k)*M2.get(k,2);
            MR.m53 += M1.get(5,k)*M2.get(k,3);
            MR.m54 += M1.get(5,k)*M2.get(k,4);
            MR.m55 += M1.get(5,k)*M2.get(k,5);
         }
      }
   }

}
