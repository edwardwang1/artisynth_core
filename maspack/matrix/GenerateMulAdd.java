/**
 * Copyright (c) 2014, by the Authors: John E Lloyd (UBC)
 *
 * This software is freely available under a 2-clause BSD license. Please see
 * the LICENSE file in the ArtiSynth distribution directory for details.
 */
package maspack.matrix;

import java.io.*;
import java.util.*;
import maspack.util.*;

public class GenerateMulAdd {

   IndentingPrintWriter pw;
   static String myClassName = "MatrixMulAdd";
   static String myFileName = myClassName + ".java";


   public void open() throws IOException {
      pw = new IndentingPrintWriter (new FileWriter (myFileName));
      pw.println ("package maspack.matrix;");
      pw.println ("");
      pw.println ("/**");
      pw.println (" * Provides static methods to implement MatrixBlock.mulAdd()");
      pw.println (" * NOTE: This code is machine generated by GenerateMulAdd");
      pw.println (" */");
      pw.println ("public class "+myClassName+" {");
      pw.println ("");
      pw.addIndentation (3);
   }

   protected int numRows (String dimen) {
      return dimen.charAt(0)-'0';
   }

   protected int numCols (String dimen) {
      return dimen.charAt(2)-'0';
   }

   protected String getClassName (String dimen) {
      if (numRows(dimen) == numCols(dimen) && numRows(dimen) > 1) {
         return "Matrix"+numRows(dimen)+"dBase";
      }
      else {
         return "Matrix"+dimen;
      }
   }

   protected String getClassName (int nr, int nc) {
      return getClassName (nr + "x" + nc);
   }

   public void generateMulStatement (
      int i, int j, int nk, int maxk, int newLineIndent) {

      if (nk > maxk) {
         pw.print ("(");
      }
      for (int k=0; k<Math.min (nk, maxk); k++) {
         if (k > 0) {
            pw.print (" + ");
         }
         pw.print ("A.m"+i+k+"*B.m"+k+j);
      }
      if (nk > maxk) {
         pw.println (" +");
         for (int l=0; l<newLineIndent; l++) {
            pw.print (" ");
         }
         for (int k=maxk; k<nk; k++) {
            if (k > maxk) {
               pw.print (" + ");
            }
            pw.print ("A.m"+i+k+"*B.m"+k+j);
         }
         pw.println (");");
      }
      else {
         pw.println (";");                  
      }
   }

   public void generateBlock (int nr, int nc, int nk) throws IOException {
      pw.println ("case "+nk+": {");
      pw.addIndentation (3);
      String classR = getClassName (nr, nc);
      String class1 = getClassName (nr, nk);
      String class2 = getClassName (nk, nc);
      pw.println (class1+" A = ("+class1+")M1;");
      pw.println (class2+" B = ("+class2+")M2;");
      if (class1.equals (classR) || class2.equals (classR)) {
         // need to implment using temp variables
         for (int i=0; i<nr; i++) {
            pw.println ("");
            for (int j=0; j<nc; j++) {
               pw.print ("double t"+i+j+" = ");
               generateMulStatement (i, j, nk, 3, 14);
            }
         }
         for (int i=0; i<nr; i++) {
            pw.println ("");
            for (int j=0; j<nc; j++) {
               pw.println ("MR.m"+i+j+" += t"+i+j+";");
            }
         }
      }
      else {
         for (int i=0; i<nr; i++) {
            pw.println ("");
            for (int j=0; j<nc; j++) {
               pw.print ("MR.m"+i+j+" += ");
               generateMulStatement (i, j, nk, 4, 11);
            }
         }
      }
      pw.println ("break;");
      pw.addIndentation (-3);      
      pw.println ("}");
   }

   

   public void writeMethod (String dimen) throws IOException {
      int nr = numRows(dimen);
      int nc = numCols(dimen);
      pw.println ("public static void mulAdd"+dimen+
                  " ("+getClassName(dimen)+" MR, Matrix M1, Matrix M2) {");
      pw.addIndentation (3);
      pw.println ("if (M1.rowSize() != "+nr+" ||");
      pw.println ("    M2.colSize() != "+nc+" ||");
      pw.println ("    M1.colSize() != M2.rowSize()) {");
      pw.println ("   throw new ImproperSizeException (");
      pw.println ("      \"matrix sizes \"+M1.getSize()+\" and \"+M2.getSize()+");
      pw.println ("      \" do not conform to \"+MR.getSize());");
      pw.println ("}");
      pw.println ("if (M1.isFixedSize() && M2.isFixedSize()) {");
      pw.println ("   switch (M1.colSize()) {");
      pw.addIndentation (6);
      for (int nk : MatrixBlockBase.getMulDimensions (nr, nc)) {
         generateBlock (nr, nc, nk);
      }
      pw.addIndentation (-6);
      pw.println ("   }");
      pw.println ("}");
      pw.println ("else {");
      pw.println ("   for (int k=0; k<M1.colSize(); k++) {");
      pw.addIndentation (6);
      for (int i=0; i<nr; i++) {
         if (i > 0) {
            pw.println ("");
         }
         for (int j=0; j<nc; j++) {
            pw.println ("MR.m"+i+j+" += M1.get("+i+",k)*M2.get(k,"+j+");");
         }
      }
      pw.addIndentation (-6);      
      pw.println ("   }");
      pw.println ("}");
      pw.addIndentation (-3);
      pw.println ("}");
      pw.println ("");
   }

   public void close() throws IOException {
      pw.addIndentation (-3);
      pw.println ("}");
      pw.close();
   }

   public static void main (String[] args) {
      GenerateMulAdd generator = new GenerateMulAdd();

      try {
         generator.open();
         for (String dimen : MatrixBlockBase.getDefinedSizes()) {
            generator.writeMethod (dimen);
         }
         generator.close();
      }
      catch (Exception e) {
         e.printStackTrace();
         System.exit(1); 
      }
      System.out.println ("Wrote " + myFileName);
   }
}
